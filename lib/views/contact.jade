extends ./base.jade

append body
    if this.props.item
        .container
            h2 Kontakt bearbeiten
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Zur√ºck
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-lg-3.col-md-4.col-sm-6.col-xs-12
                    div.text-center
                        img.img-responsive(src=this.getImagePath() onClick=this.choseImage)
                        input(type="file" style="display:none" ref="image" onChange=this.applyImage)
                .col-lg-9.col-md-8.col-sm-6.col-xs-12
                    h3 Kontakt Daten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Typ
                            .col-lg-10
                                select.form-control(value=this.props.item.type onChange=this.setValue("type"))
                                    option(value="person") Person
                                    option(value="company") Firma
                                    option(value="club") Verein
                        if this.props.item.type == "person"
                            .form-group
                                label.col-lg-2.control-label Anrede
                                .col-lg-10
                                    input.form-control(placeholder="Anrede" value=this.props.item.salutation onChange=this.setValue("salutation"))
                            .form-group
                                label.col-lg-2.control-label Name
                                .col-lg-10(style="display:flex")
                                    input.form-control(type="text" placeholder="Vorname" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.props.item.firstname onChange=this.setValue("firstname"))
                                    input.form-control(type="text" placeholder="Nachname" style="flex:1;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.props.item.lastname onChange=this.setValue("lastname"))
                        else
                            .form-group
                                label.col-lg-2.control-label Name
                                .col-lg-10
                                    input.form-control(placeholder="Name" value=this.props.item.firstname onChange=this.setValue("firstname"))
                        .form-group
                            label.col-lg-2.control-label Adresse
                            .col-lg-10
                                div(style="marginBottom:15px;display:flex")
                                    input.form-control(placeholder="Strasse" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.props.item.streetName onChange=this.setValue("streetName"))
                                    input.form-control(placeholder="Hausnummer" style="width:25%;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.props.item.streetNr onChange=this.setValue("streetNr"))
                                div(style="marginBottom:15px;display:flex")
                                    input.form-control(placeholder="PLZ" style="width:25%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.props.item.zip onChange=this.setValue("zip"))
                                    input.form-control(placeholder="Ort" style="flex:1;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.props.item.city onChange=this.setValue("city"))
                        .form-group
                            label.col-lg-2.control-label E-Mail
                            .col-lg-10
                                each email in this.props.item.emails
                                    div(style="marginBottom:15px;display:flex")
                                        input.form-control(placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px" value=email.type onChange=this.setValue("type",email))
                                        input.form-control(placeholder="E-Mail" style="flex:1;borderRight:0px;borderRadius:0px" value=email.email onChange=this.setValue("email",email))
                                        .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(email.standard?"color:orange":"") onClick=this.setEmailAsStandard(email))
                                            i.glyphicon.glyphicon-star
                                        .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removeEmail(email))
                                            i.glyphicon.glyphicon-trash
                                div(style="marginBottom:15px")
                                    .btn.btn-default.pull-right(onClick=this.addEmail)
                                        i.glyphicon.glyphicon-plus
                        .form-group
                            label.col-lg-2.control-label Telefon
                            .col-lg-10
                                each phone in this.props.item.phones
                                    div(style="marginBottom:15px;display:flex")
                                        input.form-control(placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px" value=phone.type onChange=this.setValue("type",phone))
                                        input.form-control(placeholder="Nummer" style="flex:1;borderRight:0px;borderRadius:0px" value=phone.number onChange=this.setValue("number",phone))
                                        .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(phone.standard?"color:orange":"") onClick=this.setPhoneAsStandard(phone))
                                            i.glyphicon.glyphicon-star
                                        .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removePhone(phone))
                                            i.glyphicon.glyphicon-trash
                                div(style="marginBottom:15px")
                                    .btn.btn-default.pull-right(onClick=this.addPhone)
                                        i.glyphicon.glyphicon-plus
                        .form-group
                            label.col-lg-2.control-label Kommentar
                            .col-lg-10
                                TextArea.form-control(placeholder="Kommentar" value=this.props.item.comment onChange=this.setValue("comment"))
                    block properties
            block container
append properties
append container

script.
    var client = require("../client.js");
    var TextArea = require("react-textarea-autosize");
    
    
    exports.componentDidMount = function(){
        if(!this.props.item) this.loadContact();
    }
    
    exports.getContactId = function(){
        return this.props.params.contact;
    }
    
    exports.loadContact = function(){
        client.getContact(this.getContactId(),function(err,contact){
            if(err) return;
            this.props.item = contact;
            this.update();
        }.bind(this));       
    }
    
    exports.setValue = function(name,target){
        return function(e){
            (target||this.props.item)[name] = e.target.value;
            this.update();
        }.bind(this)
    }
    
    exports.getImagePath = function(){
        return this.props.item.image?this.props.item.image.url:"/api/contacts/"+this.props.item._id+"/image";
    }
    
    exports.choseImage = function(e){
        this.refs.image.getDOMNode().click();
    }
    
    exports.applyImage = function(e){
        var self = this;
        var files = e.target.files;
        if(files.length && (files[0].type == "image/jpeg" || files[0].type == "image/jpg" || files[0].type == "image/png")){
            var reader = new FileReader();
            reader.onload = function(e) {
                self.props.item.image = {file:files[0],url:e.target.result}
                self.update();
            }
            reader.readAsDataURL(files[0]);
        }
    }
    
    exports.addEmail = function(){
        var entry = {type:"",email:""};
        if(!this.props.item.emails.length) entry.standard = true;
        this.props.item.emails.push(entry);
        this.update();
    }
    
    exports.removeEmail = function(email){
        return function(){            
            this.props.item.emails.splice(this.props.item.emails.indexOf(email),1);
            if(email.standard && this.props.item.emails.length) this.props.item.emails[0].standard = true;
            this.update();
        }.bind(this);
    }
    
    exports.setEmailAsStandard = function(email){
        return function(){
            var emails = this.props.item.emails;
            for(var i = 0; i < emails.length; i++) delete emails[i].standard;
            email.standard = true;
            this.update();
        }.bind(this);
    }
    
    exports.addPhone = function(){
        var entry = {type:"",number:""};
        if(!this.props.item.phones.length) entry.standard = true;
        this.props.item.phones.push(entry);
        this.update();
    }
    
    exports.removePhone = function(phone){
        return function(){            
            this.props.item.phones.splice(this.props.item.phones.indexOf(phone),1);
            if(phone.standard && this.props.item.phones.length) this.props.item.phones[0].standard = true;
            this.update();
        }.bind(this);
    }
    
    exports.setPhoneAsStandard = function(phone){
        return function(){
            var phones = this.props.item.phones;
            for(var i = 0; i < phones.length; i++) delete phones[i].standard;
            phone.standard = true;
            this.update();
        }.bind(this);
    }
    
    exports.cancel = function(){
        history.back();
    }
    
    exports.save = function(){
        var data = {
            type:this.props.item.type,
            salutation:this.props.item.salutation,
            firstname:this.props.item.firstname,
            lastname:this.props.item.lastname,
            streetName:this.props.item.streetName,
            streetNr:this.props.item.streetNr,
            zip:this.props.item.zip,
            city:this.props.item.city,
            emails:this.props.item.emails,
            phones:this.props.item.phones,
            comment:this.props.item.comment
        };
        client.updateContact(this.getContactId(),data,function(err,id){
            if(err) return;
        }.bind(this));
        if(this.props.item.image){
            client.updateContactImage(this.getContactId(),{image:this.props.item.image.url},function(err){
                if(err) return;
                delete this.props.item.image;
                this.update();
            }.bind(this));
        }        
    }
    
    
