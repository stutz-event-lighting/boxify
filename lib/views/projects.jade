extends ./base.jade

append body
    - this.checkData();
    .container
        h1 Projekte
        .searchbar(style="display:flex")
            .input-group(style="flex:1;display:flex;width:auto;")
                input.form-control(type="text" style="display:block;width:auto;flex:1" onChange=this.search value=this.state.search||"")
                span.input-group-btn(style="display:inline-block;width:auto;")
                    button.btn.btn-default Suchen
            .btn-group(style="margin-left:10px")
                button.btn.btn-primary(onClick=this.create) Erfassen
        label
            input(type="checkbox" checked=this.state.finished onChange=this.changeFinishedFilter)
            |  Abgeschlossene Projekte anzeigen
        table.table.table-striped.table-hover
            thead
                tr
                    th Name
                    th Kunde
                    th Beginn
                    th Ende
            tbody
                - var over;
                each item in this.state.items
                    - var isOver = item.end < new Date()
                    if over!==undefined && over != isOver
                        tr
                            td(style="backgroundColor:white;height:70px" colSpan=4)
                    - over = isOver
                    tr(onClick=this.edit(item))
                        td= item.name
                        td= item.customer
                        td= moment(item.start).format("LLL")
                        td
                            = moment(item.end).format("LLL")
                            button.btn.btn-xs.btn-default.pull-right(onClick=this.delete(item))
                                i.glyphicon.glyphicon-trash
    if this.state.create
        Modal
            .modal-header
                h2 Projekt erstellen
            .modal-body
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Name
                        .col-lg-10
                            input.form-control(type="text" value=this.state.create.name onChange=this.validateCreateName.bind(this))
                    .form-group
                        label.col-lg-2.control-label Kunde
                        .col-lg-10
                            Select(value=this.state.create.customer asyncOptions=this.findCustomers onChange=this.onCustomerChanged)
                    .form-group
                        label.col-lg-2.control-label Beginn
                        .col-lg-10
                            DatePicker(value=this.state.create.start?new Date(this.state.create.start):undefined format="dd.MM.yyyy HH:mm" onChange=this.onStartChanged)
                    .form-group
                        label.col-lg-2.control-label Ende
                        .col-lg-10
                            DatePicker(value=this.state.create.end?new Date(this.state.create.end):undefined format="dd.MM.yyyy HH:mm" onChange=this.onEndChanged)
            .modal-footer
                button.btn.btn-default(onClick=this.cancelCreate) Abbrechen
                button.btn.btn-primary(onClick=this.confirmCreate) Erfassen
    if this.state.delete
        ConfirmDialog(title="Projekt löschen" action="Löschen" question=("\""+this.state.delete.name+"\" löschen möchten") onConfirm=this.confirmDelete onCancel=this.cancelDelete)
script.
    var client = require("../client.js");
    var Select = require("react-select");
    var DatePicker = require("react-widgets").DateTimePicker;
    var moment = require("moment");
    var ConfirmDialog = require("./ConfirmDialog.jade");
    var Modal = require("./Modal.jade");
    
    exports.getNeededPermissions = function(){
        return ["projects_read"];
    }
        
    exports.checkData = function(){
        var self = this;
        if(!this.state.items){
            client.findProjects({search:this.state.search,finished:this.state.finished},function(err,items){
                if(err) return;
                self.state.items = items;
                self.update();
            });
        }
    }

    exports.search = function(e){
        this.state.search = e.target.value;
        delete this.state.items;
        this.update();
    }
    
    exports.changeFinishedFilter = function(e){
        if(e.target.checked){
            this.state.finished = true;
        }else{
            delete this.state.finished;
        }
        delete this.state.items;
        this.update();
    }

    exports.create = function(){
        var self = this;
        this.state.create = {name:"",start:moment({hour:20}).toDate().getTime(),end:moment({hour:20}).add(1,"days").toDate().getTime()};
        this.update();
    }
    exports.validateCreateName = function(e){
        this.state.create.name = e.target.value;
        this.update();
    }
    
    exports.onCustomerChanged = function(id,selection){
        if(id.length){
            this.state.create.customer = id;
            this.state.create.customername = selection[0].label;
        }else{
            delete this.state.create.customer;
            delete this.state.create.customername;
        }
    }
    
    exports.onStartChanged = function(time){
        this.state.create.start = time.getTime();
        this.update();
    }
    
    exports.onEndChanged = function(time){
        this.state.create.end = time.getTime();
        this.update();
    }
    
    exports.findCustomers = function(input,cb){
        client.findCustomers({search:input},function(err,customers){
            cb(err,{options:customers.map(function(customer){return {value:customer._id,label:(customer.firstname?customer.firstname+" ":"")+(customer.lastname||"")}})})
        })
    }
    
    exports.cancelCreate = function(){
        delete this.state.create;
        this.update();
    }
    exports.confirmCreate = function(){
        var self = this;
        
        var create = self.state.create;
        if(!create.customer) return;
        
        
        client.createProject(this.state.create,function(err,id){
            if(err) return;
            delete self.state.create;
            self.update();
            visit("/projects/"+id)
        });
    }

    exports.edit = function(item){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+item._id)
        }        
    }

    exports.delete = function(item){
        return function(){
            this.state.delete = item;
            this.update();
        }.bind(this)
    }

    exports.cancelDelete = function(){
        delete this.state.delete;
        this.update();
    }
    exports.confirmDelete = function(){
        var self = this;
        var del = this.state.delete;
        delete this.state.delete;
        client.deleteProject(del._id,function(err){
            delete self.state.items;
            self.update();
        })
    }
