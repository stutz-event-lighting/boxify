extends ./profile.jade

append properties
    if this.props.user
        h4 Berechtigungen
        each permission,key in this.props.user.permissions
            if client.hasPermission(key)
                div
                    label
                        input(type="checkbox" checked=permission.allowed onChange=this.togglePermission(permission))
                        = " "+permission.name
        h4 Verwaltete Benutzer
        Select(value=this.props.user.ownedUsers.map(function(user){return {value:user._id,label:user.name}}) asyncOptions=this.findUsers onChange=this.onUsersChanged multi=true)
script.
    var client = require("../client.js");
    var Select = require("react-select");
    
    exports.getNeededPermissions = function(){
        return ["users_read"];
    }
    
    exports.getContactId = function(){
        return this.props.params.user;
    }
    
    exports._loadContact = exports.loadContact;
    
    exports.loadContact = function(){
        this._loadContact();
        client.getUser(this.getContactId(),function(err,user){
            if(err) return;
            this.props.user = user;
            this.update();
        }.bind(this));
    }
    
    exports.cancel = function(){
        history.back();
    }
    
    exports.togglePermission = function(permission){
        return function(e){
            permission.allowed = e.target.checked;
            this.update();
        }.bind(this);        
    }
    
    exports._save = exports.save;

    exports.save = function(){
        this._save();
        var permissions = {};
        for(var permission in this.props.user.permissions){
            permissions[permission] = this.props.user.permissions[permission].allowed;
        }
        
        client.saveUser(this.props.user._id,{
            permissions:permissions,
            ownedUsers:this.props.user.ownedUsers.map(function(user){return user._id})
        },function(err){
            if(err) return true;
            back(true);
        });
    }
    
    exports.findUsers = function(input,cb){
        client.findUsers({input:input},function(err,users){
            cb(err,{options:users.map(function(user){return {value:user._id,label:user.firstname+" "+user.lastname}})})
        });
    }
    
    exports.onUsersChanged = function(id,selection){
        this.props.user.ownedUsers = selection.map(function(selection){return {_id:selection.value,name:selection.label}});
        this.forceUpdate();
    }
