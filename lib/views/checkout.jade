extends ./base.jade

append body
    - this.checkData();
    if this.props.data
        .container
            h2 Warenausgang
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Abbrechen
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-xs-12.col-md-8
                    h3 Equipment
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th ID
                                th Name
                                each supplier in this.props.suppliers
                                    th
                                        img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                                th Total
                        tbody
                            each type in this.props.data.types
                                if type.needed !== undefined || type.count > 0
                                    tr(onClick=this.startScan(type._id) className=((this.props.data.types[type._id].needed&&this.props.data.types[type._id].needed>(this.props.data.types[type._id].count||0))?"danger":""))
                                        td= type._id
                                        td= type.name
                                        each supplier in this.props.suppliers
                                            td
                                                = ((this.props.data.types[type._id].suppliers && this.props.data.types[type._id].suppliers[supplier])?(this.props.data.types[type._id].suppliers[supplier].count||"0"):"0")
                                                | /
                                                = ((this.props.data.types[type._id].suppliers && this.props.data.types[type._id].suppliers[supplier])?this.props.data.types[type._id].suppliers[supplier].available:0)
                                        td
                                            = this.props.data.types[type._id].count||"0"
                                            if this.props.data.types[type._id].needed
                                                = "/"+this.props.data.types[type._id].needed
                .col-md-4
                    .pull-left
                        h3 Verlauf
                    .btn-toolbar.pull-right(style="marginTop:18px")
                        DropdownButton(title=this.renderSupplierButtonTitle(null,null,this.props.supplier||"own")[0] onSelect=this.setSupplier)        
                            each supplier in this.props.allsuppliers
                                MenuItem(eventKey=supplier)
                                    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                        ScanButton.pull-left(onScan=this.handleScan supplier=this.props.supplier ref="scanbutton")
                        QuaggaButton.pull-left.visible-xs(onScan=this.onQuaggaScan)
                    table.table.table-striped.table-hover
                        thead
                            th
                            th Name
                            th
                        tbody
                            each entry,i in this.props.data.history.slice().reverse()
                                tr
                                    td
                                        img(src="/api/contacts/"+entry.supplier+"/image" style="height:20px")
                                    td
                                        +renderLogEntry(entry,0)
                                    td
                                        .btn.btn-xs.btn-default(onClick=this.remove(i))
                                            .glyphicon.glyphicon-trash
mixin renderLogEntry(entry,level)
    if entry.items
        each contents,item in entry.items
            div(style="paddingLeft:"+(level*20)+"px")
                = this.props.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderLogEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            b= entry.count+" "
            = this.props.data.types[entry.type].name
mixin renderSupplierButtonTitle(supplier)
    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
script.
    var client = require("../client.js");
    var async = require("async");
    var ScanButton = require("./ScanButton.jade");
    var async = require("async");
    var DropdownButton = require("react-bootstrap/DropdownButton");
    var MenuItem = require("react-bootstrap/MenuItem");
    var QuaggaButton = require("./QuaggaButton.jade");
    var bs = require("../barcodescanner.js");
    
    exports.getNeededPermissions = function(){
        return ["projects_read"];
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.props.data === undefined){
            var opts = {};
            if(this.props.reservation) opts.reservation = this.props.reservation;
            client.getCheckout(this.props.params.project,this.props.params.checkout,opts,function(err,data){
                if(err) return;
                self.props.data = data;
                self.calculateSuppliers();
                var suppliers = {};
                for(var type in self.props.data.types){
                    for(var supplier in self.props.data.types[type].suppliers) suppliers[supplier] = true;
                }
                self.props.allsuppliers = Object.keys(suppliers);
                self.props.supplier = "own";
                data.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
                for(var type in data.types){
                    type = parseInt(type,10);
                    var category = data.categories[data.types[type].category];
                    if(!category.types) category.types = [];
                    category.types.push(type);
                }

                self.update();
            });
        }
    }
    
    exports.calculateSuppliers = function(){
        var suppliers = {};
        for(var type in this.props.data.types){
            if(this.props.data.types[type].count || this.props.data.types[type].needed)
            for(var supplier in this.props.data.types[type].suppliers) suppliers[supplier] = true;
        }
        this.props.suppliers = Object.keys(suppliers);
    }
    
    exports.setSupplier = function(supplier){
        this.props.supplier = supplier;
        this.update();
    }
    
    exports.startScan = function(type){
        return function(){
            this.refs.scanbutton.scan();
            this.refs.scanbutton.onEquipmenttypeChanged(type,[{value:type,label:this.props.data.types[type].name}]);
        }.bind(this)
    }
        
    exports.onQuaggaScan = function(code){
        bs.parse(code);
    }
    
    exports.handleScan = function(code){
        if(code.kind == "EQ" && this.props.data.types[code.type]){
            if(!code.supplier) code.supplier = this.props.supplier;
            var entry = {
                supplier:code.supplier||"own",
                type:code.type,
                count:code.count||1
            };
            
            if(code.item){                
                this.getEntryContents(entry,[code.item],function(err){
                    if(err) return this.playErrorSound();
                    this.add(entry);
                }.bind(this));
            }else if(entry.supplier == "own" && this.props.data.types[entry.type].hasItems){
                return this.playErrorSound();
            }else{
                this.add(entry);
            }           
        }
    }
    
    exports.getEntryContents = function(entry,items,cb){
        async.each(items,function(item,cb){
            client.getEquipment(entry.type,item,function(err,item){
                if(err) return cb(err);
                item = item.item;
                if(!entry.items) entry.items = {};
                async.map(Object.keys(item.contents),function(type,cb){
                    var subentry = {
                        supplier:entry.supplier,
                        type:type,
                        count:item.contents[type].count
                    };
                    if(item.contents[type].ids){
                        this.getEntryContents(subentry,item.contents[type].ids,function(err){
                            if(err) return cb(err);
                            cb(null,subentry);
                        }.bind(this));
                    }else{
                        cb(null,subentry);
                    }
                }.bind(this),function(err,items){
                    if(err) return cb(err);
                    entry.items[item.id] = items;
                    cb();
                }.bind(this))
            }.bind(this))
        }.bind(this),cb);
    }
    
    exports.calculateEntryTotal = function(entry,total){
        total = total||{};
        if(!total[entry.type]) total[entry.type] = {count:0};
        total[entry.type].count += entry.count;
        for(var item in entry.items){
            item = parseInt(item,10);
            if(!total[entry.type].ids) total[entry.type].ids = [];
            if(total[entry.type].ids.indexOf(item) < 0) total[entry.type].ids.push(item);
            for(var i = 0; i < entry.items[item].length; i++){
                this.calculateEntryTotal(entry.items[item][i],total);
            }
        }
        return total;
    }
    
    exports.checkAvailability = function(supplier,total){
        for(var type in total){
            if(
                !this.props.data.types[type].suppliers ||
                !this.props.data.types[type].suppliers[supplier] ||
                ((this.props.data.types[type].suppliers[supplier].available||0) - (this.props.data.types[type].suppliers[supplier].count||0)) < total[type].count
            ){
                return false;
            }
            if(total[type].ids){
                for(var i = 0; i < total[type].ids.length; i++){
                    if(
                        this.props.data.types[type].suppliers[supplier].ids &&
                        this.props.data.types[type].suppliers[supplier].ids.indexOf(total[type].ids[i]) >= 0
                    ){
                        return false;
                    }
                }
            }
        }
        return true;
    }
        
    exports.add = function(entry){
        var total = this.calculateEntryTotal(entry);
        if(this.checkAvailability(entry.supplier,total)){
            for(var type in total){
                if(!this.props.data.types[type].count) this.props.data.types[type].count = 0;
                this.props.data.types[type].count += total[type].count;
                if(!this.props.data.types[type].suppliers[entry.supplier]) this.props.data.types[type].suppliers[entry.supplier] = {count:0,available:0}
                if(!this.props.data.types[type].suppliers[entry.supplier].count) this.props.data.types[type].suppliers[entry.supplier].count = 0;
                this.props.data.types[type].suppliers[entry.supplier].count += total[type].count;
                if(total[type].ids) {
                    if(!this.props.data.types[type].suppliers[entry.supplier].ids) this.props.data.types[type].suppliers[entry.supplier].ids = [];
                    Array.prototype.splice.apply(this.props.data.types[type].suppliers[entry.supplier].ids,[0,0].concat(total[type].ids));
                }
            }
            this.props.data.history.push(entry);
            this.calculateSuppliers();
            this.update();
        }else{
            this.playErrorSound();
        }
    }
    
    exports.remove = function(index){
        return function(){
            var entry = this.props.data.history.splice(index,1)[0];
            var total = this.calculateEntryTotal(entry);
            for(var type in total){
                if(total[type].ids) {
                    for(var i = 0; i < total[type].ids.length; i++){
                        this.props.data.types[type].suppliers[entry.supplier].ids.splice(this.props.data.types[type].suppliers[entry.supplier].ids.indexOf(total[type].ids[i]),1);
                    }
                    if(!this.props.data.types[type].suppliers[entry.supplier].ids.length) delete this.props.data.types[type].suppliers[entry.supplier].ids;
                }
                this.props.data.types[type].suppliers[entry.supplier].count -= total[type].count;
                if(!this.props.data.types[type].suppliers[entry.supplier].count){
                    delete this.props.data.types[type].suppliers[entry.supplier].count;
                    if(!this.props.data.types[type].suppliers[entry.supplier].available && !this.props.data.types[type].suppliers[entry.supplier].needed) delete this.props.data.types[type].suppliers[entry.supplier];
                }
            
                this.props.data.types[type].count -= total[type].count;
                if(!this.props.data.types[type].count) delete this.props.data.types[type].count
            }
            this.calculateSuppliers();
            this.update();            
        }.bind(this);
    }
    
    

        
    exports.playErrorSound = function(){
        new Audio("/public/audio/error.wav").play();
    }

    exports.cancel = function(){
        history.back();
    }


    exports.save = function(){
        var data = {};
        for(var type in this.props.data.types){
            var t = this.props.data.types[type];
            if(!t.count) continue;
            data[type] = {
                count:t.count,
                suppliers:{}
            };
            for(var supplier in t.suppliers){
                if(!t.suppliers[supplier].count) continue;
                data[type].suppliers[supplier] = {
                    count:t.suppliers[supplier].count,
                    ids:t.suppliers[supplier].ids
                };
            }
        }
    
        client.updateCheckout(this.props.params.project,this.props.params.checkout,{items:data,history:this.props.data.history},this.props.reservation,function(err){
            if(err) return true;
            back(true);
        });
    }
