extends ./base.jade

append body
    - this.checkData();
    if this.props.item
        .container
            h2 Projekt
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-xs-12
                    h3 Projektdaten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Kommentar" value=this.props.item.name onChange=this.onNameChange)
            .row
                .col-xs-12.col-md-6
                    h3
                        | Reservationen
                        .btn.btn-primary.pull-right(onClick=this.createReservation) Neu
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th Name
                                th Objektarten
                                th Objekte
                        tbody
                            - var i = 1;
                            each reservation in this.props.reservations
                                tr(onClick=this.openReservation(reservation))
                                    td= "Reservation "+(i++)
                                    td= reservation.count
                                    td
                                        = reservation.total
                                        .btn-toolbar.pull-right
                                            button.btn.btn-default.btn-xs(onClick=this.deleteReservation(reservation))
                                                i.glyphicon.glyphicon-trash
                                            button.btn.btn-primary.btn-xs(onClick=this.checkoutReservation(reservation))
                                                i.glyphicon.glyphicon-log-out
                .col-xs-12.col-md-6
                    h3
                        | Zumietungen
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th Zulieferer
                                th Status
                                th Objektarten
                                th Objekte
                        tbody
                            each rental in this.props.rentals
                                tr(onClick=this.openRental(rental))
                                    td= this.props.suppliers[rental.supplier].name
                                    td= states[rental.status]
                                    td= rental.count
                                    td
                                        = rental.total
                                        .btn-toolbar.pull-right
                                            button.btn.btn-default.btn-xs(onClick=this.deleteRental(rental))
                                                i.glyphicon.glyphicon-trash
                    if this.props.needsRental
                        .alert.alert-warning(onClick=this.createRental) Es sind weitere Zumietungen nötig!
            .row            
                .col-xs-12.col-md-6
                    h3 
                        | Ausgänge
                        .btn.btn-primary.pull-right(onClick=this.createCheckout) Neu
                    table.table.table-striped
                        thead
                            tr
                                th Datum
                                th Mitarbeiter
                                th Objekte
                        tbody
                .col-xs-12.col-md-6
                    h3 Eingänge
                    table.table.table-striped
                        thead
                            tr
                                th Datum
                                th Mitarbeiter
                                th Objekte
                        tbody
    if this.props.createrental
        .modal(style="display:block").fade.in
            .modal-backdrop(style="bottom:0px;display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2 Zumietung erfassen
                    .modal-body
                        .form-horizontal
                            .form-group
                                label.col-lg-2.control-label Lieferant
                                .col-lg-10
                                    Select(value=this.props.createrental.supplier asyncOptions=this.findSuppliers onChange=this.onRentalSupplierChanged)
                    .modal-footer
                        button.btn.btn-default(onClick=this.cancelCreateRental) Abbrechen
                        button.btn.btn-primary(onClick=this.confirmCreateRental) Erfassen
script.
    var client = require("../client.js");
    var moment = require("moment");
    var Select = require("react-select");
    
    var states = {
        "booked":"Gebucht",
        "received":"Erhalten",
        "returned":"Zurückgegeben"
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.props.item === undefined){
            client.getProject(this.props.params.id,function(err,data){
                if(err) return;
                self.props.item = data.project;
                self.props.reservations = data.reservations;
                self.props.rentals = data.rentals;
                self.props.suppliers = data.suppliers;
                self.props.needsRental = data.needsRental;
                self.update();
            });
        }
    }
    
    exports.onNameChange = function(e){
        this.props.item.name = e.target.value;
        this.update();
    }
    
    exports.createReservation = function(){
        client.createReservation(this.props.params.id,function(err,id){
            if(err) return;
            visit("/projects/"+this.props.params.id+"/reservations/"+id);
        }.bind(this));
    }
    
    
    exports.openReservation = function(reservation){
        var self = this;
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+self.props.params.id+"/reservations/"+reservation._id)
        }
    }
    
    exports.checkoutReservation = function(reservation){
        var self = this;
        return function(){
            visit("/projects/"+self.props.params.id+"/checkouts/new/"+reservation._id)
        }
    }
    
    exports.deleteReservation = function(reservation){
        var self = this;
        return function(){
            client.deleteReservation(self.props.params.id,reservation._id,function(err){
                if(!err){
                    self.props.reservations.splice(self.props.reservations.indexOf(reservation),1);
                    self.update();
                }
            })
        }
    }
    
    exports.createRental = function(){
        this.props.createrental = {supplier:null};
        this.update();
    }
    
    exports.findSuppliers = function(input,cb){
        client.findSuppliers({search:input},function(err,suppliers){
            cb(err,{options:suppliers.map(function(suppliers){return {value:suppliers._id,label:suppliers.name}})})
        })
    }
    
    exports.onRentalSupplierChanged = function(id,selection){
        if(id.length){
            this.props.createrental.supplier = id;
            this.props.createrental.suppliername = selection[0].label;
        }else{
            delete this.props.createrental.supplier;
            delete this.props.createrental.suppliername;
        }
    }
    
    exports.cancelCreateRental = function(){
        delete this.props.createrental;
        this.update();
    }
    
    exports.confirmCreateRental = function(){
        if(!this.props.createrental.supplier) return;
        var self = this;
        client.createRental(this.props.params.id,this.props.createrental.supplier,function(err,id){
            if(err) return;
            delete self.props.createrental;
            self.update();
            visit("/projects/"+self.props.params.id+"/rentals/"+id);
        })
    }
    
    exports.openRental = function(rental){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+this.props.params.id+"/rentals/"+rental._id);
        }.bind(this)
    }
    
    exports.deleteRental = function(rental){
        return function(){
            client.deleteRental(this.props.params.id,rental._id,function(err){
                this.props.rentals.splice(this.props.rentals.indexOf(rental),1);
                this.update();
            }.bind(this))
        }.bind(this);
    }
    
    exports.createCheckout = function(){
        visit("/projects/"+this.props.params.id+"/checkouts/new");
    }

    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        client.updateProject(this.props.item._id,{name:this.props.item.name},function(err){
            if(err) return true;
            back(true);
        });
    }
