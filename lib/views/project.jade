extends ./base.jade

append body
    - this.checkData();
    if this.state.item
        .container
            h2 Projekt
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-xs-12
                    h3 Projektdaten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Kommentar" value=this.state.item.name onChange=this.onNameChange)
                        .form-group
                            label.col-lg-2.control-label Beginn
                            .col-lg-10
                                DatePicker(disabled=(this.state.io.length>0) value=new Date(this.state.item.start) format="dd.MM.yyyy HH:mm" onChange=this.onStartChanged)
                        .form-group
                            label.col-lg-2.control-label Ende
                            .col-lg-10
                                DatePicker(value=new Date(this.state.item.end) format="dd.MM.yyyy HH:mm" onChange=this.onEndChanged)
                        .form-group
                            label.col-lg-2.control-label Kommentar
                            .col-lg-10
                                TextArea.form-control(placeholder="Kommentar" value=this.state.item.comment onChange=this.onCommentChange)
            .row
                .col-xs-12
                    h3
                        | Reservationen
                        if this.state.item.status == "ongoing"
                            .btn.btn-primary.pull-right(onClick=this.createReservation) Neu
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th Name
                                th Objektarten
                                th Objekte
                        tbody
                            - var i = 1;
                            each reservation in this.state.reservations
                                tr(onClick=this.openReservation(reservation))
                                    td= "Reservation "+(i++)
                                    td= reservation.count
                                    td
                                        = reservation.total
                                        .btn-toolbar.pull-right
                                            button.btn.btn-default.btn-xs(onClick=this.deleteReservation(reservation))
                                                i.glyphicon.glyphicon-trash
                                            button.btn.btn-primary.btn-xs(onClick=this.checkoutReservation(reservation))
                                                i.glyphicon.glyphicon-log-out
                    if this.state.needsRental
                        .alert.alert-warning(onClick=this.createRental) Sie haben mehr Material reserviert als in diesem Zeitraum verfügbar ist. Sie müssen Material zumieten.
            .row
                .col-xs-12
                    h3
                        | Aus- und Eingänge
                        if this.state.item.status == "ongoing"
                            .btn-toolbar.pull-right
                                .btn.btn-primary(onClick=this.createCheckout) 
                                    .glyphicon.glyphicon-log-out
                                    |  Neuer Ausgang
                                .btn.btn-primary(onClick=this.createCheckin)
                                    .glyphicon.glyphicon-log-in
                                    |  Neuer Eingang
                    table.table.table-striped
                        thead
                            tr
                                th Typ
                                th Datum
                                th Benutzer
                                th Objekte
                        tbody
                            each io in this.state.io
                                tr(onClick=io.type=="checkout"?this.editCheckout(io):this.editCheckin(io))
                                    td
                                        div(className="glyphicon glyphicon-log-"+(io.type=="checkout"?"out":"in"))
                                    td= moment(io.time).format("LLL")
                                    td= this.state.users[io.user].firstname+" "+this.state.users[io.user].lastname
                                    td
                                        = io.count+" / "+io.total
                                        button.btn.btn-default.btn-xs.pull-right(onClick=(io.type=="checkout"?this.deleteCheckout(io):this.deleteCheckin(io)))
                                            i.glyphicon.glyphicon-trash
                    if Object.keys(this.state.item.balance).length
                        .alert.alert-warning(onClick=this.createCheckin) Es ist noch nicht alles Material vom Kunden zurückgekommen!
            .row
                .col-xs-12
                    h3 Aktionen
                        .btn-toolbar.pull-right
                            if this.state.item.status == "ongoing"
                                .btn.btn-primary(onClick=this.finish disabled=Object.keys(this.state.item.balance).length>0) Projekt abschliessen
    if this.state.confirm
        = this.createConfirmDialog(this.state.confirm)
script.
    var client = require("../client.js");
    var moment = require("moment");
    var TextArea = require("react-textarea-autosize");
    var ConfirmDialog = require("./ConfirmDialog.jade");
    var DatePicker = require("react-widgets").DateTimePicker;
    
    exports.getNeededPermissions = function(){
        return ["projects_read"];
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.state.item === undefined){
            client.getProject(this.props.params.id,function(err,data){
                if(err) return;
                self.state.item = data.project;
                self.state.reservations = data.reservations;
                self.state.needsRental = data.needsRental;
                self.state.io = data.io;
                self.state.users = data.users;
                self.update();
            });
        }
    }

    exports.onNameChange = function(e){
        this.state.item.name = e.target.value;
        this.update();
    }
    
    
    exports.onCommentChange = function(e){
        this.state.item.comment = e.target.value;
        this.update();
    }    
    
    exports.onStartChanged = function(time){
        if(time) this.state.item.start = time.getTime();
        this.update();
    }
    
    exports.onEndChanged = function(time){
        if(time) this.state.item.end = time.getTime();
        this.update();
    }

    exports.createReservation = function(){
        client.createReservation(this.props.params.id,function(err,id){
            if(err) return;
            visit("/projects/"+this.props.params.id+"/reservations/"+id);
        }.bind(this));
    }


    exports.openReservation = function(reservation){
        var self = this;
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+self.props.params.id+"/reservations/"+reservation._id)
        }
    }

    exports.checkoutReservation = function(reservation){
        var self = this;
        return function(){
            visit("/projects/"+self.props.params.id+"/checkouts/new",{reservation:reservation._id});
        }
    }

    exports.deleteReservation = function(reservation){
        return function(){
            this.confirm("Reservation löschen","Löschen","diese Reservation löschen möchten","confirmDeleteReservation",reservation._id);
        }.bind(this)        
    }
    
    exports.confirmDeleteReservation = function(reservation){
        client.deleteReservation(this.props.params.id,reservation,function(){
            delete this.state.item;
            this.update();
        }.bind(this));
    }
    
    exports.createRental = function(){
        visit("/rentals/newrequest",{project:this.props.params.id});
    }
    
    exports.createCheckout = function(){
        visit("/projects/"+this.props.params.id+"/checkouts/new");
    }
    
    exports.editCheckout = function(io){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+this.props.params.id+"/checkouts/"+io._id)
        }.bind(this);
    }
    
    exports.deleteCheckout = function(checkout){
        return function(){
            this.confirm("Warenausgang löschen","Löschen", "diesen Warenausgang löschen möchten", "confirmDeleteCheckout",checkout._id );
        }.bind(this);
    }
    
    exports.confirmDeleteCheckout = function(checkout){    
        client.deleteCheckout(this.props.params.id,checkout,function(){
            delete this.state.item;
            this.update();
        }.bind(this));
    }
    
    exports.createCheckin = function(){
        visit("/projects/"+this.props.params.id+"/checkins/new");
    }
    
    exports.editCheckin = function(checkin){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+this.props.params.id+"/checkins/"+checkin._id)
        }.bind(this);
    }
    
    exports.deleteCheckin = function(checkin){
        return function(){
            this.confirm("Wareneingang löschen","Löschen","diesen Wareneingang löschen wollen","confirmDeleteCheckin",checkin._id);
        }.bind(this);
    }
    exports.confirmDeleteCheckin = function(checkin){
        client.deleteCheckin(this.props.params.id,checkin,function(){
            delete this.state.item;
            this.update();
        }.bind(this));
    }
    
    exports.finish = function(){
        client.finishProject(this.state.item._id,function(err){
            if(err) return;
            this.state.item.status = "finished";
            this.update();
        }.bind(this));
    }


    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        client.updateProject(this.state.item._id,{name:this.state.item.name,start:this.state.item.start,end:this.state.item.end,comment:this.state.item.comment||""},function(err){
            if(err) return true;
            back(true);
        });
    }    
    
    exports.createConfirmDialog = function(opts){
        return ConfirmDialog({
            title:opts.title,
            action:opts.action,
            question:opts.question,
            onAnswer:function(confirmed){
                delete this.state.confirm;
                this.update();
                if(confirmed) this[opts.callback](opts.data);
            }.bind(this)
        });
    }
    
    exports.confirm = function(title,action,question,cb,data){
        this.state.confirm = {
            title:title,
            action:action,
            question:question,
            callback:cb,
            data:data
        };
        this.update();
    }
