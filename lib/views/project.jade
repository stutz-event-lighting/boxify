extends ./base.jade

append body
    - this.checkData();
    if this.props.item
        .container
            h2 Projekt
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-xs-12
                    h3 Projektdaten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Kommentar" value=this.props.item.name onChange=this.onNameChange)
                        .form-group
                            label.col-lg-2.control-label Kommentar
                            .col-lg-10
                                TextArea.form-control(placeholder="Kommentar" value=this.props.item.comment onChange=this.onCommentChange)
            .row
                .col-xs-12
                    h3
                        | Reservationen
                        .btn.btn-primary.pull-right(onClick=this.createReservation) Neu
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th Name
                                th Objektarten
                                th Objekte
                        tbody
                            - var i = 1;
                            each reservation in this.props.reservations
                                tr(onClick=this.openReservation(reservation))
                                    td= "Reservation "+(i++)
                                    td= reservation.count
                                    td
                                        = reservation.total
                                        .btn-toolbar.pull-right
                                            button.btn.btn-default.btn-xs(onClick=this.deleteReservation(reservation))
                                                i.glyphicon.glyphicon-trash
                                            button.btn.btn-primary.btn-xs(onClick=this.checkoutReservation(reservation))
                                                i.glyphicon.glyphicon-log-out
                    if this.props.needsRental
                        .alert.alert-warning(onClick=this.createRental) Sie haben mehr Material reserviert als in diesem Zeitraum verfügbar ist. Sie müssen Material zumieten.
            .row
                .col-xs-12.col-md-6
                    h3
                        | Ausgänge
                        .btn.btn-primary.pull-right(onClick=this.createCheckout) Neu
                    table.table.table-striped
                        thead
                            tr
                                th Datum
                                th Benutzer
                                th Objekte
                        tbody
                            each io in this.props.io
                                if io.type == "checkout"
                                    tr(onClick=this.editCheckout(io))
                                        td= moment(io.time).format("LLL")
                                        td= this.props.users[io.user].firstname+" "+this.props.users[io.user].lastname
                                        td
                                            = io.count+" / "+io.total
                                            button.btn.btn-default.btn-xs.pull-right(onClick=this.deleteCheckout(io))
                                                i.glyphicon.glyphicon-trash
                .col-xs-12.col-md-6
                    h3
                        | Eingänge
                        .btn.btn-primary.pull-right(onClick=this.createCheckin) Neu
                    table.table.table-striped
                        thead
                            tr
                                th Datum
                                th Benutzer
                                th Objekte
                        tbody
                            each io in this.props.io
                                if io.type == "checkin"
                                    tr(onClick=this.editCheckin(io))
                                        td= moment(io.time).format("LLL")
                                        td= this.props.users[io.user].firstname+" "+this.props.users[io.user].lastname
                                        td
                                            = io.count+" / "+io.total
                                            button.btn.btn-default.btn-xs.pull-right(onClick=this.deleteCheckin(io))
                                                i.glyphicon.glyphicon-trash
                    if Object.keys(this.props.item.balance).length
                        .alert.alert-warning(onClick=this.createCheckin) Es ist noch nicht alles vom Kunden Material zurückgekommen!
            .row
                .col-xs-12
                    h3 Aktionen
                        .btn-toolbar.pull-right
                            if this.props.item.status == "ongoing"
                                .btn.btn-primary(onClick=this.finish disabled=Object.keys(this.props.item.balance).length>0) Projekt abschliessen
script.
    var client = require("../client.js");
    var moment = require("moment");
    var TextArea = require("react-textarea-autosize");
    
    exports.getNeededPermissions = function(){
        return ["projects_read"];
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.props.item === undefined){
            client.getProject(this.props.params.id,function(err,data){
                if(err) return;
                self.props.item = data.project;
                self.props.reservations = data.reservations;
                self.props.needsRental = data.needsRental;
                self.props.io = data.io;
                self.props.users = data.users;
                self.update();
            });
        }
    }

    exports.onNameChange = function(e){
        this.props.item.name = e.target.value;
        this.update();
    }
    
    
    exports.onCommentChange = function(e){
        this.props.item.comment = e.target.value;
        this.update();
    }

    exports.createReservation = function(){
        client.createReservation(this.props.params.id,function(err,id){
            if(err) return;
            visit("/projects/"+this.props.params.id+"/reservations/"+id);
        }.bind(this));
    }


    exports.openReservation = function(reservation){
        var self = this;
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+self.props.params.id+"/reservations/"+reservation._id)
        }
    }

    exports.checkoutReservation = function(reservation){
        var self = this;
        return function(){
            visit("/projects/"+self.props.params.id+"/checkouts/new",{reservation:reservation._id});
        }
    }

    exports.deleteReservation = function(reservation){
        var self = this;
        return function(){
            client.deleteReservation(self.props.params.id,reservation._id,function(err){
                if(!err){
                    delete self.props.item;
                    self.update();
                }
            })
        }
    }
    
    exports.createRental = function(){
        visit("/rentals/newrequest",{project:this.props.params.id});
    }
    
    exports.createCheckout = function(){
        visit("/projects/"+this.props.params.id+"/checkouts/new");
    }
    
    exports.editCheckout = function(io){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+this.props.params.id+"/checkouts/"+io._id)
        }.bind(this);
    }
    
    exports.deleteCheckout = function(checkout){
        var self = this;
        return function(){
            client.deleteCheckout(self.props.params.id,checkout._id,function(){
                delete self.props.item;
                self.update();
            });
        }
    }
    
    exports.createCheckin = function(){
        visit("/projects/"+this.props.params.id+"/checkins/new");
    }
    
    exports.editCheckin = function(checkin){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/projects/"+this.props.params.id+"/checkins/"+checkin._id)
        }.bind(this);
    }
    
    exports.deleteCheckin = function(checkin){
        var self = this;
        return function(){
            client.deleteCheckin(self.props.params.id,checkin._id,function(){
                delete self.props.item;
                self.update();
            });
        }
    }
    
    exports.finish = function(){
        client.finishProject(this.props.item._id,function(err){
            if(err) return;
            this.props.item.status = "finished";
            this.update();
        }.bind(this));
    }


    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        client.updateProject(this.props.item._id,{name:this.props.item.name,comment:this.props.item.comment||""},function(err){
            if(err) return true;
            back(true);
        });
    }
