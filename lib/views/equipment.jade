extends ./base.jade

append body
    - this.checkData();
    .container
        h1 Equipment
        .searchbar(style="display:flex")
            .input-group(style="flex:1;display:flex;width:auto;")
                input.form-control(type="text" style="display:block;width:auto;flex:1" onChange=this.search value=this.props.search||"")
                span.input-group-btn(style="display:inline-block;width:auto;")
                    button.btn.btn-default Suchen
            .btn-group(style="margin-left:10px")
                button.btn.btn-primary(onClick=this.create) Erfassen
        table.table.table-striped.table-hover
            thead
                tr
                    th ID
                    th Name
                    th Kategorie
                    th Anzahl
                    th.hidden-xs Grösse
                    th.hidden-xs Gewicht
                    th
            tbody
                each item in this.props.items
                    tr(onClick=this.edit(item))
                        td= item._id
                        td= item.name
                        td= item.category?this.props.categoriesbyid[item.category]:"Keine"
                        td= item.count
                        td.hidden-xs= item.length&&item.width&&item.height?(item.length+"x"+item.width+"x"+item.height):""
                        td.hidden-xs= item.weight
                        td
                            button.btn.btn-xs.btn-default.pull-right(onClick=this.delete(item))
                                i.glyphicon.glyphicon-trash
    if this.props.create
        .modal(style="display:block").fade.in
            .modal-backdrop(style="bottom:0px;display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2 Equipmenttyp anlegen
                    .modal-body
                        .form-horizontal
                            .form-group
                                label.col-lg-2.control-label Name
                                .col-lg-10
                                    input.form-control(type="text" value=this.props.create.name onChange=this.validateCreateName.bind(this))
                    .modal-footer
                        button.btn.btn-default(onClick=this.cancelCreate) Abbrechen
                        button.btn.btn-primary(onClick=this.confirmCreate) Erstellen
    if this.props.delete
        .modal(style="display:block").fade.in
            .modal-backdrop(style="bottom:0px;display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2 Equipmenttyp löschen
                    .modal-body= "Sind sie sicher, dass sie \""+this.props.delete.name+"\" löschen möchten?"
                    .modal-footer
                        button.btn.btn-default(onClick=this.cancelDelete) Abbrechen
                        button.btn.btn-primary(onClick=this.confirmDelete) Löschen
        


main.
    var client = require("../client.js");
    var async = require("async");
    exports.checkData = function(){
        var self = this;
        
        async.parallel([
            function(cb){
                if(self.props.items) return cb();
                console.log("getting items...");
                client.findEquipmentTypes({search:self.props.search},function(err,items){
                    self.props.items = items;
                    cb(true);
                });
            },
            function(cb){
                if(self.props.categories) return cb();
                client.getEquipmentCategories(function(err,categories){
                    if(err) return cb();
                    self.props.categories = categories;
                    self.props.categoriesbyid = {};
                    categories.forEach(function(category){
                        self.props.categoriesbyid[category._id] = category.name;
                    })
                    cb(true);
                })
            }
        ],function(update){
            if(update) self.update();
        })
        
        
        
    }
    
    exports.search = function(e){
        this.props.search = e.target.value;
        delete this.props.items;
        this.update();
    }

    exports.getInitialState = function(){
        this.checkData();
        return {};
    }

    exports.create = function(){
        var self = this;
        this.props.create = {_id:"",name:""};
        this.update();
        setTimeout(function(){
            self.refs.createid.getDOMNode().focus();
        },1);
    }
    exports.validateCreateName = function(e){
        this.props.create.name = e.target.value;
        this.update();
    }
    exports.cancelCreate = function(){
        delete this.props.create;
        this.update();
    }
    exports.confirmCreate = function(){
        var self = this;
        client.createEquipmentType(this.props.create,function(err,id){
            if(err) return;
            delete self.props.create;
            self.update();
            setTimeout(function(){
                visit("/equipment/"+id)
            },1)
        });
    }

    exports.edit = function(item){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/equipment/"+item._id)
        }
    }
    
    exports.delete = function(item){
        return function(){
            this.props.delete = item;
            this.update();
        }.bind(this)
    }
    
    exports.cancelDelete = function(){
        delete this.props.delete;
        this.update();
    }
    exports.confirmDelete = function(){
        var self = this;
        var del = this.props.delete;
        delete this.props.delete;
        client.deleteEquipmentType(del._id,function(err){
            delete self.props.items;
            self.update();            
        })
    }
