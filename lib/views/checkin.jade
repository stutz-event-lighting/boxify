extends ./base.jade

append body
    - this.checkData();
    if this.props.data
        .container
            h2 Wareneingang
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Abbrechen
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-xs-12.col-md-8
                    h3 Equipment
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th ID
                                th Name
                                each supplier in this.props.suppliers
                                    th
                                        img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                                th Total
                        tbody
                            each type in this.props.data.types
                                if type.available !== undefined || type.count !== undefined
                                    tr(onClick=this.startScan(type._id))
                                        td= type._id
                                        td= type.name
                                        each supplier in this.props.suppliers
                                            td
                                                = ((this.props.data.types[type._id].suppliers && this.props.data.types[type._id].suppliers[supplier])?(this.props.data.types[type._id].suppliers[supplier].count||"0"):"0")
                                                | /
                                                = ((this.props.data.types[type._id].suppliers && this.props.data.types[type._id].suppliers[supplier])?this.props.data.types[type._id].suppliers[supplier].available:0)
                                        td= (this.props.data.types[type._id].count||"0") + "/"+this.props.data.types[type._id].available
                .col-md-4
                    .pull-left
                        h3 Verlauf
                    .btn-toolbar.pull-right(style="margin-top:18px")
                        DropdownButton(title=this.renderSupplierButtonTitle(null,null,this.props.supplier||"own")[0] onSelect=this.setSupplier)        
                            each supplier in this.props.allsuppliers
                                MenuItem(eventKey=supplier)
                                    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                        ScanButton.pull-left(onScan=this.handleScan ref="scanbutton" supplier=this.props.supplier||"own")
                    table.table.table-striped.table-hover
                        thead
                            th
                            th Name
                            th
                        tbody
                            each entry,i in this.props.data.history
                                tr
                                    td
                                        img(src="/api/contacts/"+entry.supplier+"/image" style="height:20px")
                                    td
                                        +renderLogEntry(entry,0)
                                    td
                                        .btn.btn-xs.btn-default(onClick=this.remove(i))
                                            .glyphicon.glyphicon-trash
    - this.scanreceiver = null;
    if this.props.entry
        .modal(style="display:block").fade.in
            .modal-backdrop(style="bottom:0px;display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2 Case-Inhalt scannen
                    .modal-body(style="maxHeight:500px;overflowY:auto")
                        +renderCaseEntry(this.props.entry,0)
                    .modal-footer
                        button.btn.btn-default(onClick=this.cancelEntry) Abbrechen
                        button.btn.btn-primary(onClick=this.finishEntry) Fertig
mixin renderLogEntry(entry,level)
    if entry.items
        each contents,item in entry.items
            div(style="paddingLeft:"+(level*20)+"px")
                = this.props.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderLogEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            b= entry.count+" "
            = this.props.data.types[entry.type].name
mixin renderSupplierButtonTitle(supplier)
    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
mixin renderCaseEntry(entry,level)
    -var parentscanreceiver = this.scanreceiver;
    if entry.items
        each contents,item in entry.items
            - this.scanreceiver = {parent:parentscanreceiver,contents:contents, entry:entry}
            div(style="paddingLeft:"+(level*20)+"px")
                = this.props.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderCaseEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            input.form-control(type="text" value=entry.count style="width:50px;display:inline-block" onChange=this.onCountChanged(entry) onFocus=this.select)
            = " "+this.props.data.types[entry.type].name                
script.
    var client = require("../client.js");
    var ScanButton = require("./ScanButton.jade");
    var async = require("async");
    var DropdownButton = require("react-bootstrap/DropdownButton");
    var MenuItem = require("react-bootstrap/MenuItem");
    
    exports.getNeededPermissions = function(){
        return ["projects_read"];
    }
    
    exports.getInitialState = function(){
        this.props.supplier = "own";
        return {};
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.props.data === undefined){
            client.getCheckin(this.props.params.project,this.props.params.checkin,function(err,data){
                if(err) return;
                self.props.data = data;
                var suppliers = {};
                for(var type in self.props.data.types){
                    for(var supplier in self.props.data.types[type].suppliers) suppliers[supplier] = true;
                }
                self.props.suppliers = self.props.allsuppliers = Object.keys(suppliers);
                self.update();
            });
        }
    }
    
    exports.select = function(e){
        setTimeout(e.target.select.bind(e.target));;
    }
    
    exports.onCountChanged = function(entry){
        return function(e){
            var count = parseInt(e.target.value,10);
            if(!isNaN(count)){
                entry.count = count;
            }
            this.update();
        }.bind(this);
    }
    
    exports.setSupplier = function(supplier){
        this.props.supplier = supplier;
        this.update();
    }
    
    exports.startScan = function(type){
        return function(){
            this.refs.scanbutton.scan();
            this.refs.scanbutton.onEquipmenttypeChanged(type,[{value:type,label:this.props.data.types[type].name}]);
        }.bind(this)
    }
    
    exports.handleScan = function(code){
        if(code.kind == "EQ" && this.props.data.types[code.type]){
            if(!code.supplier) code.supplier = this.props.supplier;
            var entry = {
                supplier:code.supplier||"own",
                type:parseInt(code.type,10),
                count:code.count||1
            };
            
            if(code.item){
                this.getEntryContents(entry,[code.item],function(err){
                    if(err) return this.playErrorSound();
                    this.insertOrClose(entry,this.scanreceiver);
                }.bind(this));
            }else if(entry.supplier == "own" && this.props.data.types[entry.type].hasItems){
                return this.playErrorSound();
            }else if(!this.scanreceiver){
                this.add(entry);
            }
        }
    }
    
    exports.insertOrClose = function(entry,receiver){
        var itemId = Object.keys(entry.items)[0];
        var item = entry.items[itemId];
        while(receiver != null){
            for(var i = 0; i < receiver.contents.length; i++){
                if(receiver.contents[i].type == entry.type){
                    if(receiver.contents[i].items[itemId]) return this.playErrorSound();
                    receiver.contents[i].count ++;
                    receiver.contents[i].items[itemId] = item;
                    //reorder this item to the end
                    receiver.contents.push(receiver.contents.splice(i,1)[0]);
                    this.update();
                    return;
                }
            }
            var type = this.props.data.types[receiver.entry.type];
            if(type.contents == "*"){
                receiver.contents.push(entry);
                this.update();
                return;
            }            
            receiver = receiver.parent;
        }
        if(this.props.entry) this.finishEntry();
        this.props.entry = entry;
        if(!entry.items[itemId].length && this.props.data.types[entry.type].contents != "*"){
            this.finishEntry();
        }else{
            this.update();
        }
    }
    
    exports.finishEntry = function(){
        var entry = this.props.entry;
        delete this.props.entry;
        this.add(entry);
    }
    
    exports.cancelEntry = function(){
        delete this.props.entry;
        this.update();
    }
    
    exports.getEntryContents = function(entry,item,cb){
        client.getEquipment(entry.type,item,function(err,data){
        
            var item = data.item;
        
            if(err) return cb(err);
            var type = this.props.data.types[entry.type];

            var entries = [];
            if(type.contents instanceof Array){
                for(var i = 0; i < type.contents.length; i++){
                    var t = type.contents[i];
                    var subentry = {
                        supplier:entry.supplier,
                        type:t,
                        count:item.contents[t]?item.contents[t].count:0
                    };
                    if(this.props.data.types[t].hasItems){
                        subentry.items = {};
                        subentry.count = 0;
                    }
                    entries.push(subentry);
                }
            }
            if(!entry.items) entry.items = {};
            entry.items[item.id] = entries;
            cb();
        }.bind(this))        
    }
    
    exports.calculateEntryTotal = function(entry,total){
        total = total||{};
        if(!total[entry.type]) total[entry.type] = {count:0};
        total[entry.type].count += entry.count;
        for(var item in entry.items){
            item = parseInt(item,10)
            if(!total[entry.type].ids) total[entry.type].ids = [];
            if(total[entry.type].ids.indexOf(item) < 0) total[entry.type].ids.push(item);
            for(var i = 0; i < entry.items[item].length; i++){
                if(!entry.items[item][i].count){
                    entry.items[item].splice(i--,1);
                    continue;
                };
                this.calculateEntryTotal(entry.items[item][i],total);
            }
        }
        return total;
    }
    
    exports.checkAvailability = function(supplier,total){
        for(var type in total){
            if(
                !this.props.data.types[type].suppliers ||
                !this.props.data.types[type].suppliers[supplier] ||
                ((this.props.data.types[type].suppliers[supplier].available||0) - (this.props.data.types[type].suppliers[supplier].count||0)) < total[type].count
            ){
                return false;
            }
            if(total[type].ids){
                for(var i = 0; i < total[type].ids.length; i++){
                    if(
                        this.props.data.types[type].suppliers[supplier].ids &&
                        this.props.data.types[type].suppliers[supplier].ids.indexOf(total[type].ids[i]) >= 0
                    ){
                        return false;
                    }
                }
            }
        }
        return true;
    }
        
    exports.add = function(entry){
        var total = this.calculateEntryTotal(entry);
        if(this.checkAvailability(entry.supplier,total)){
            for(var type in total){
                if(!this.props.data.types[type].count) this.props.data.types[type].count = 0;
                this.props.data.types[type].count += total[type].count;
                if(!this.props.data.types[type].suppliers[entry.supplier]) this.props.data.types[type].suppliers[entry.supplier] = {count:0,available:0}
                if(!this.props.data.types[type].suppliers[entry.supplier].count) this.props.data.types[type].suppliers[entry.supplier].count = 0;
                this.props.data.types[type].suppliers[entry.supplier].count += total[type].count;
                if(total[type].ids) {
                    if(!this.props.data.types[type].suppliers[entry.supplier].ids) this.props.data.types[type].suppliers[entry.supplier].ids = [];
                    Array.prototype.splice.apply(this.props.data.types[type].suppliers[entry.supplier].ids,[0,0].concat(total[type].ids));
                }
            }
            this.props.data.history.push(entry);
            this.applyContents(entry);
        }else{
            this.playErrorSound();
        }
        this.update();
    }
    
    exports.remove = function(index){
        return function(){
            var entry = this.props.data.history.splice(index,1)[0];
            var total = this.calculateEntryTotal(entry);
            for(var type in total){
                if(total[type].ids) {
                    for(var i = 0; i < total[type].ids.length; i++){
                        this.props.data.types[type].suppliers[entry.supplier].ids.splice(this.props.data.types[type].suppliers[entry.supplier].ids.indexOf(total[type].ids[i]),1);
                    }
                    if(!this.props.data.types[type].suppliers[entry.supplier].ids.length) delete this.props.data.types[type].suppliers[entry.supplier].ids;
                }
                this.props.data.types[type].suppliers[entry.supplier].count -= total[type].count;
                if(!this.props.data.types[type].suppliers[entry.supplier].count){
                    delete this.props.data.types[type].suppliers[entry.supplier].count;
                    if(!this.props.data.types[type].suppliers[entry.supplier].available && !this.props.data.types[type].suppliers[entry.supplier].needed) delete this.props.data.types[type].suppliers[entry.supplier];
                }
            
                this.props.data.types[type].count -= total[type].count;
                if(!this.props.data.types[type].count) delete this.props.data.types[type].count
            }
            this.update();            
        }.bind(this);
    }
    
    exports.applyContents = function(entry){
        for(var item in entry.items){
            item = parseInt(item,10);
            var contents = {};
            for(var i = 0; i <  entry.items[item].length; i++){
                var subitem = entry.items[item][i];
                contents[subitem.type] = {count:subitem.count}
                if(subitem.items){
                    contents[subitem.type].ids = Object.keys(subitem.items);
                    this.applyContents(subitem);
                }
            }
            client.saveEquipment(entry.type,item,{contents:contents},function(){})
        }
    }
    
    
    
    exports.playErrorSound = function(){
        new Audio("/public/audio/error.wav").play();
    }
    
    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        var data = {};
        for(var type in this.props.data.types){
            var t = this.props.data.types[type];
            if(!t.count) continue;
            data[type] = {
                count:t.count,
                suppliers:{}
            };
            for(var supplier in t.suppliers){
                if(!t.suppliers[supplier].count) continue;
                data[type].suppliers[supplier] = {
                    count:t.suppliers[supplier].count,
                    ids:t.suppliers[supplier].ids
                };
            }
        }
    
        client.updateCheckin(this.props.params.project,this.props.params.checkin,{items:data,history:this.props.data.history},function(err){
            if(err) return true;
            back(true);
        });
    }
