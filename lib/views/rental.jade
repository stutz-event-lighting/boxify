extends ./base.jade

append body
    - this.checkData();
    if this.props.data
        .container
            h2 Zumiete
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel)
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=this.save)
                        i.glyphicon.glyphicon-ok
                        = " "+(this.props.params.rental.indexOf("new") == 0?"Erstellen":"Speichern")
            .row
                .col-xs-12
                    h3 Daten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Name" value=this.props.data.rental.name onChange=this.onNameChange)
                        .form-group
                            label.col-lg-2.control-label Lieferant
                            .col-lg-10
                                if this.props.params.rental.indexOf("new") != 0
                                    input.form-control(disabled=true value=this.props.data.rental.supplier.label)
                                else
                                    Select(value=this.props.data.rental.supplier asyncOptions=this.findSuppliers onChange=this.onSupplierChange)
                        .form-group
                            label.col-lg-2.control-label Erhalt
                            .col-lg-10
                                DatePicker(disabled=(this.props.data.rental.status=="received") format="dd.MM.yyyy HH:mm" value=this.props.data.rental.delivery?new Date(this.props.data.rental.delivery):undefined onChange=this.onDeliveryChanged)
                        .form-group
                            label.col-lg-2.control-label Rückgabe
                            .col-lg-10
                                DatePicker(value=this.props.data.rental.return?new Date(this.props.data.rental.return):undefined format="dd.MM.yyyy HH:mm" onChange=this.onReturnChanged)
            .row
                .col-xs-12                    
                    h3
                        | Equipment
                        .pull-right
                            if this.props.params.rental.indexOf("new") == 0
                                .btn.btn-primary(onClick=this.add) Hinzufügen
                            else if this.props.data.rental.status == "requested"
                                .btn.btn-primary(onClick=this.book) Buchen
                            else if this.props.data.rental.status == "booked"
                                .btn.btn-primary(onClick=this.receive) Ware erhalten
                            else
                                .btn.btn-primary(onClick=this.return) Ware zurückgeben
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th ID
                                th Name
                                th Anzahl
                                th
                        tbody
                            each type in this.props.data.types
                                if this.props.data.types[type._id].count !== undefined || this.props.data.types[type._id].available < 0
                                    tr
                                        td= type._id
                                        td= this.props.data.types[type._id].name
                                        td(style="paddingTop:2px;paddingBottom:2px")
                                            if this.props.params.rental.indexOf("new") == 0
                                                input.form-control.input-sm(value=(this.props.data.types[type._id].count||0)+"" style="max-width:100px" onChange=this.changeItem(type._id) onFocus=this.selectCount)
                                            else
                                                = this.props.data.types[type._id].count||0
                                        td
                                            .btn.btn-default.btn-xs.pull-right(onClick=this.removeItem(type._id))
                                                i.glyphicon.glyphicon-trash
    if this.props.add
        .modal(style="display:block").fade.in
            .modal-backdrop(style="bottom:0px;display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2 Equipment hinzufügen
                    .modal-body(style="maxHeight:500px;overflowY:auto")
                        each category in this.props.data.categories
                            h4= category.name
                            table.table.table-striped
                                tbody
                                    each type in category.types                                
                                        if this.props.data.types[type].count === undefined
                                            tr
                                                td(onClick=this.addItem(type))= this.props.data.types[type].name
                    .modal-footer
                        button.btn.btn-primary(onClick=this.done) Fertig
script.
    var client = require("../client.js");
    var Select = require("react-select");
    var DatePicker = require("react-widgets").DateTimePicker;
    
    exports.getNeededPermissions = function(){
        return ["rentals_read"];
    }
    
    exports.checkData = function(){
        var self = this;
        if(this.props.data === undefined){
            var opts = {};
            if(this.props.project) opts.project = this.props.project;
            client.getRental(this.props.params.rental,opts,function(err,data){
                if(err) return;
                self.props.data = data;
                if(!self.props.data.rental){
                    self.props.data.rental = {
                        name:"",
                        supplier:null,
                        status:self.props.params.rental=="newrequest"?"requested":(self.props.params.rental=="newbooking"?"booked":"received")
                    }                    
                }
                if(!self.props.data.rental.delivery) self.props.data.rental.delivery = new Date().getTime();
                if(!self.props.data.rental.return) self.props.data.rental.return = new Date().getTime()+24*60*60*1000;
                data.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
                for(var type in data.types){
                    var category = data.categories[data.types[type].category];
                    if(!category.types) category.types = [];
                    category.types.push(type);                    
                }
                self.update();
            });
        }
    }
    
    exports.onNameChange = function(e){
        this.props.data.rental.name = e.target.value;
        this.update();
    }
    
    exports.findSuppliers = function(input,cb){
        client.findSuppliers({search:input},function(err,suppliers){
            cb(err,{options:suppliers.map(function(supplier){return {value:supplier._id,label:(supplier.firstname?supplier.firstname+" ":"")+(supplier.lastname||"")}})})
        })
    }
    
    exports.onSupplierChange = function(id,selection){
        if(id.length){
            this.props.data.rental.supplier = selection[0];
        }else{
            delete this.props.data.rental.supplier;
        }
        this.update();
    }
    
    exports.onDeliveryChanged = function(time){
        if(time) this.props.data.rental.delivery = time.getTime();
        this.update();
    }
    
    exports.onReturnChanged = function(time){
        if(time) this.props.data.rental.return = time.getTime();
        this.update();
    }
    
    exports.add = function(){
        this.props.add = true;
        this.update();
    }
    
    exports.done = function(){
        delete this.props.add;
        this.update();
    }
    
    exports.addItem = function(type){
        return function(){
            this.props.data.types[type].count = 0;
            this.update();
        }.bind(this);
    }
    
    exports.changeItem = function(type){
        return function(e){
            if(/^[0-9]+$/.test(e.target.value)) this.props.data.types[type].count = parseInt(e.target.value,10);
            if(e.target.value.length == 0) this.props.data.types[type].count = 0;            
            this.update();
        }.bind(this);
    }
    
    exports.selectCount = function(e){
        setTimeout(e.target.select.bind(e.target))        
    }
    
    exports.removeItem = function(type){
        return function(){
            delete this.props.data.types[type].count;
            this.update();
        }.bind(this);
    }
    
    exports.book = function(){
        client.updateRentalStatus(this.props.params.rental,"booked",function(err){
            back(true);
        })
    }
    exports.receive = function(){
        client.updateRentalStatus(this.props.params.rental,"received",function(err){
            back(true);
        })
    }
    exports.return = function(){
        client.updateRentalStatus(this.props.params.rental,"returned",function(err){
            back(true);
        })
    }

    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        var items = {};
        for(var type in this.props.data.types){
            if(this.props.data.types[type].count) items[type] = {count:this.props.data.types[type].count,ids:this.props.data.types[type].ids};
        }
    
        var rental = {
            name:this.props.data.rental.name,
            supplier:this.props.data.rental.supplier.value,
            delivery:this.props.data.rental.delivery,
            return:this.props.data.rental.return,
            status:this.props.data.rental.status,
            items:items
        };
               
        client.updateRental(this.props.params.rental,rental,function(err){
            if(err) return true;
            back(true);
        });
    }
