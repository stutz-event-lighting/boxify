extends ./base.jade

append body
    if this.state.item && this.state.stock !== undefined && this.state.items && this.state.graph && this.state.categories
        .container
            h2 Equipmenttyp bearbeiten
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=function(){this.cancel()}.bind(this))
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=function(){this.save()}.bind(this))
                        i.glyphicon.glyphicon-ok
                        |  Speichern
            .row
                .col-lg-3.col-md-4.col-sm-6.col-xs-12
                    div.text-center
                        ImageViewer(image=this.getImagePath() onChange=this.onImageChanged editable)
                        br
                        img(src="/api/barcode/EQ-"+this.state.item._id+"/"+(this.state.item.manufacturer?(this.state.item.manufacturer+" "):"")+this.state.item.name width="100%")
                .col-lg-9.col-md-8.col-sm-6.col-xs-12
                    h4 Technische Daten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(type="text" placeholder="Name" value=this.state.item.name onChange=function(e){this.state.item.name = e.target.value; this.update()}.bind(this))
                        .form-group
                            label.col-lg-2.control-label Kategorie
                            .col-lg-10
                                .input-group
                                    select.form-control(onChange=this.onCategoryChanged value=this.state.item.category||"null")
                                        option(value="null") Keine
                                        each category in this.state.categories
                                            option(value=category._id)= category.name
                                    span.input-group-btn
                                        button.btn.btn-default(onClick=this.startEditCategories)
                                            i.glyphicon.glyphicon-pencil
                        .form-group
                            label.col-lg-2.control-label Tags
                            .col-lg-10
                                Select(value=(this.state.item.tags||[]).map(function(tag){return {value:tag,label:tag}}) asyncOptions=this.findTags onChange=this.onTagsChanged multi=true)
                        .form-group
                            label.col-lg-2.control-label Hersteller
                            .col-lg-10
                                input.form-control(type="text" placeholder="Hersteller" value=this.state.item.manufacturer onChange=function(e){this.state.item.manufacturer = e.target.value;this.update();}.bind(this))
                        .form-group
                            label.col-lg-2.control-label Hersteller Artikelnummer
                            .col-lg-10
                                input.form-control(type="text" placeholder="Hersteller Artikelnummer" value=this.state.item.manufacturerArticlenumber onChange=function(e){this.state.item.manufacturerArticlenumber = e.target.value;this.update();}.bind(this))
                        .form-group
                            label.col-lg-2.control-label Hersteller EAN Code
                            .col-lg-10
                                input.form-control(type="text" placeholder="Hersteller EAN Code" value=this.state.item.manufacturerEAN onChange=function(e){this.state.item.manufacturerEAN = e.target.value;this.update();}.bind(this))
                        .form-group
                            label.col-lg-2.control-label Technische Beschreibung
                            .col-lg-10
                                TextArea.form-control(placeholder="Technische Beschreibung" value=this.state.item.technicalDescription onChange=this.onTechnicalDescriptionChanged)
                        .form-group
                            label.col-lg-2.control-label Gewicht
                            div(className="col-lg-10 "+(!this.state.weightOk?"has-error":""))
                                .input-group
                                    input.form-control(type="text" placeholder="Gewicht" value=this.state.weight onChange=this.onWeightChange onBlur=this.onWeightBlur)
                                    span.input-group-addon kg
                        .form-group
                            label.col-lg-2.control-label Grösse
                            .col-lg-10(style="display:flex")
                                div(className=!this.state.lengthOk?"has-error":"" style="flex:1")
                                    .input-group
                                        input.form-control(type="text" placeholder="Länge" value=this.state.length onChange=this.onLengthChange onBlur=this.onLengthBlur)
                                        span.input-group-addon cm
                                div(className=!this.state.widthOk?"has-error":"" style="flex:1;marginLeft:10px")
                                    .input-group
                                        input.form-control(type="text" placeholder="Breite" value=this.state.width onChange=this.onWidthChange onBlur=this.onWidthBlur)
                                        span.input-group-addon cm
                                div(className=!this.state.heightOk?"has-error":"" style="flex:1;marginLeft:10px")
                                    .input-group
                                        input.form-control(type="text" placeholder="Höhe" value=this.state.height onChange=this.onHeightChange onBlur=this.onHeightBlur)
                                        span.input-group-addon cm
                        .form-group
                            label.col-lg-2.control-label Mietpreis
                            div(className="col-lg-10 "+(!this.state.rentOk?"has-error":""))
                                .input-group
                                    span.input-group-addon CHF
                                    input.form-control(type="text" placeholder="Mietpreis" value=this.state.rent onChange=this.onRentChange onBlur=this.onRentBlur)
                                    span.input-group-addon /Tag
                        .form-group
                            label.col-lg-2.control-label Neupreis
                            div(className="col-lg-10 "+(!this.state.factoryPriceOk?"has-error":""))
                                .input-group
                                    span.input-group-addon CHF
                                    input.form-control(type="text" placeholder="Neupreis" value=this.state.factoryPrice onChange=this.onFactoryPriceChange onBlur=this.onFactoryPriceBlur)
                        .form-group
                            label.col-lg-2.control-label Inhalt
                            .col-lg-10
                                select.form-control(value=this.state.item.contents?(this.state.item.contents=="*"?"all":"specific"):"none" disabled=(this.state.item.contents instanceof Array && this.state.item.contents.length) onChange=this.onContentsChange)
                                    option(value="none") Kein
                                    option(value="specific") Spezifisch
                                    option(value="all") Universal
                        if this.state.item.contents instanceof Array
                            .form-group
                                .col-lg-10.col-lg-offset-2
                                    Select(value=this.state.item.contents.map(function(type){return {value:type._id,label:type.name}}) asyncOptions=this.findTypes onChange=this.onEquipmenttypeChanged multi=true)
            br
            br
            .row
                .col-xs-12
                    h3
                        = "Bestand: "+this.state.stock
                        .btn-toolbar.pull-right
                            if this.state.stock
                                if !this.state.item.hasItems
                                    button.btn.btn-danger(onClick=this.decrease) Entfernen
                                button.btn.btn-primary(onClick=this.state.items.length?this.createItem:this.increase) Hinzufügen
                            else
                                DropdownButton(title="Hinzufügen" bsStyle="primary" onSelect=this.onUniversalAddClick)
                                    MenuItem(eventKey="1") Menge
                                    MenuItem(eventKey="2") Einzelobjekt
                    if this.state.items.length
                        table.table.table-striped.table-hover
                            thead
                                tr
                                    th Name
                                    th Letzte Wartung
                                    th
                            tbody
                                each item in this.state.items
                                    - (function(item){
                                    tr
                                        td(onClick=this.editItem(item))= this.state.item.name+" "+item.id
                                        td(onClick=this.editItem(item)) 12.12.2012
                                        td
                                            button.btn.btn-default.btn-xs.pull-right(onClick=this.deleteItem(item))
                                                i.glyphicon.glyphicon-trash
                                    - }).bind(this)(item)
            .row
                .col-xs-12
                    h3 Ausgänge
                    table.table.table-striped
                        thead
                            tr
                                th Projekt
                                th Anzahl
                                th Rückkehr
                        tbody
                            each project in this.state.item.locations
                                tr
                                    td= project.name
                                    td= project.count
                                    td= moment(project.to).format("LLL")
            .row
                .col-xs-12
                    h3 Reservationen
                    table.table.table-striped
                        thead
                            tr
                                th Projekt
                                th Anzahl
                                th Ausgang
                                th Rückkehr
                        tbody
                            each project in this.state.item.reservations
                                tr
                                    td= project.name
                                    td= project.count
                                    td= moment(project.from).format("LLL")
                                    td= moment(project.to).format("LLL")
            .row
                .col-xs-12
                    h3 Zumieten
                    table.table.table-striped
                        thead
                            tr
                                th Name
                                th Anzahl
                                th Erhalt
                                th Rückgabe
                        tbody
                            each rental in this.state.item.rentals
                                tr
                                    td= rental.name
                                    td= rental.count
                                    td= moment(rental.from).format("LLL")
                                    td= moment(rental.to).format("LLL")
            .row
                .col-xs-12
                    h3
                        = "Graph "+moment(this.state.start).format("MMMM YYYY")
                        .btn-toolbar.pull-right
                            .btn.btn-default(onClick=this.graphBackward)
                                .glyphicon.glyphicon-chevron-left
                            .btn.btn-default(onClick=this.graphForward)
                                .glyphicon.glyphicon-chevron-right
                    .graph(style="width:100%;height:300px;position:relative")
                        - var yAxisWidth = 50;
                        - var xAxisHeight = 50;
                        - var cap = this.cap([this.state.graph.supply,this.state.graph.ownsupply,this.state.graph.demand])
                        - var days = this.days();
                        .y-axis(style="position:absolute;bottom:"+xAxisHeight+"px;width:"+yAxisWidth+"px;top:0px;left:0px;borderRight:1px solid black")
                            each step in this.steps(cap)
                                .y-axis-label(style="position:absolute;marginTop:-10px;right:5px;top:"+(100-step/cap.range*100)+"%")= step
                        .x-axis(style="position:absolute;bottom:0px;height:"+xAxisHeight+"px;right:0px;left:"+yAxisWidth+"px;borderTop:1px solid black")
                            each day,i in days
                                .x-axis-label(style="position:absolute;left:"+(i/days.length*100)+"%;width:"+(100/days.length)+"%;textAlign:center")= day
                        .data(style="position:absolute;top:0px;right:0px;left:"+yAxisWidth+";bottom:"+xAxisHeight+"px")
                            svg(style="width:100%;height:100%")
                                svg(viewBox="0 0 100 100" preserveAspectRatio="none")
                                    path(style="fill: #ffc540;vectorEffect: non-scaling-stroke;" d=this.createAreaPath(cap,this.state.graph.supply,true))
                                    path(style="fill: #6B8E00;vectorEffect: non-scaling-stroke;" d=this.createAreaPath(cap,this.state.graph.ownsupply,true))
                                    each step in this.steps(cap)
                                        path(style="stroke:#eee;fill:transparent;strokeWidth:1;vectorEffect:non-scaling-stroke" d="M0,"+(100-step/cap.range*100)+" L100,"+(100-step/cap.range*100))
                                    each day,i in days
                                        path(style="stroke:#eee;fill:transparent;strokeWidth:1;vectorEffect:non-scaling-stroke" d="M"+(i/days.length*100)+",0L"+(i/days.length*100)+",100")
                                    path(style="stroke: red;fill:transparent;strokeWidth:3;vectorEffect: non-scaling-stroke;" d=this.createAreaPath(cap,this.state.graph.demand))
    if this.state.increase
        .modal-backdrop(style="bottom:0px;display:block").fade.in
        .modal(style="display:block").fade.in
            .modal-dialog
                .modal-content
                    .modal-header
                        h2= "Bestand "+(this.state.increase.type=="add"?"erhöhen":"verringern")
                    .modal-body
                        .form-horizontal
                            .form-group
                                label.col-lg-2.control-label Menge
                                div(className="col-lg-10 "+(!this.state.increase.countOk?"has-error":""))
                                    .input-group
                                        input.form-control(type="text" placeholder="Menge" value=this.state.increase.count onChange=function(e){this.state.increase.count=e.target.value;this.update()}.bind(this))
                                        span.input-group-addon Stk.
                    .modal-footer
                        button.btn.btn-default(onClick=this.cancelIncrease) Abbrechen
                        button.btn.btn-primary(onClick=this.confirmIncrease)= this.state.increase.type=="add"?"Hinzufügen":"Entfernen"
script.
    var client = require("../client.js");
    var DropdownButton = require("react-bootstrap/DropdownButton");
    var MenuItem = require("react-bootstrap/MenuItem");
    var async = require("async");
    var Select = require("react-select");
    var moment = require("moment");
    var TextArea = require("react-textarea-autosize");
    var ImageViewer = require("./ImageViewer.jade");

    function isInt(str){
        return /^[0-9]*$/.test(str)
    }
    function isFloat(str){
        return /^[0-9]*[.]*[0-9]*$/.test(str)
    }
    
    exports.getNeededPermissions = function(){
        return ["equipment_read"];
    }
    
    exports.componentDidMount = function(){
        this.state.start = moment().startOf("month").toDate().getTime();
        this.state.end = moment().endOf("month").toDate().getTime();
        if(!this.state.item) this.loadEquipmentType();
        this.loadStock();
        this.loadItems();
        this.loadCategories();
        this.loadGraph();
    }
    
    exports.loadEquipmentType = function(){
        client.getEquipmentType(this.props.params.type,function(err,item){
            this.state.item = item;
            this.state.weight = (item.weight||"")+"";
            this.state.weightOk = true;
            this.state.length = (item.length||"")+"";
            this.state.lengthOk = true;
            this.state.width = (item.width||"")+"";
            this.state.widthOk = true;
            this.state.height = (item.height||"")+"";
            this.state.heightOk = true;
            this.state.rent = (item.rent||"")+"";
            this.state.rentOk = true;
            this.state.factoryPrice = (item.factoryPrice||"")+"";
            this.state.factoryPriceOk = true;
            this.update();
        }.bind(this));
    }
    
    exports.loadItems = function(){
        client.getEquipmentTypeItems(this.props.params.type,function(err,items){
            if(err) return;
            this.state.items = items;
            this.update();
        }.bind(this));
    }
    
    exports.loadStock = function(){
        client.getEquipmentTypeStock(this.props.params.type,false,function(err,stock){
            if(err) return;
            this.state.stock = stock;
            this.update();
        }.bind(this));
    }
    
    exports.loadCategories = function(){
        client.getEquipmentCategories(function(err,categories){
            if(err) categories = [];
            this.state.categories = categories;
            this.update();
        }.bind(this));
    }
    
    exports.loadGraph = function(){
        client.getEquipmentTypeGraph(this.props.params.type,0,0,function(err,graph){
            this.state.graph = graph;
            this.update();
        }.bind(this))
    }
    
    exports.getImagePath = function(){
        return this.state.item.image?this.state.item.image.url:"/api/equipment/"+this.state.item._id+"/image";
    }
    
    exports.onImageChanged = function(image){
        this.state.item.image = image;
        this.update();
    }
    
    exports.startEditCategories = function(){
        this.update();
        visit("/equipment/categories");
    }

    exports.onCategoryChanged = function(e){
        if(e.target.value=="null"){
            delete this.state.item.category;
        }else{
            this.state.item.category = e.target.value;
        }
        this.update();
    }
    
    exports.onTechnicalDescriptionChanged = function(e){
        this.state.item.technicalDescription = e.target.value;
        this.update();
    }
    
    exports.onLengthChange = function(e){
        this.state.length = e.target.value;
        this.update();
    }
    exports.onWidthChange = function(e){
        this.state.width = e.target.value;
        this.update();
    }
    exports.onHeightChange = function(e){
        this.state.height = e.target.value;
        this.update();
    }
    exports.onWeightChange = function(e){
        this.state.weight = e.target.value;
        this.update();
    }
    exports.onRentChange = function(e){
        this.state.rent = e.target.value;
        this.update();
    }
    exports.onFactoryPriceChange = function(e){
        this.state.factoryPrice = e.target.value;
        this.update();
    }
    exports.onLengthBlur = function(){
        if(!isInt(this.state.length)){
            this.state.lengthOk = false;
        }else{
            this.state.lengthOk = true;
            this.state.item.length = parseInt(this.state.length,10);
        }
        this.update();
    }
    exports.onWidthBlur = function(){
        if(!isInt(this.state.width)){
            this.state.widthOk = false;
        }else{
            this.state.widthOk = true;
            this.state.item.width = parseInt(this.state.width,10);
        }
        this.update();
    }
    exports.onHeightBlur = function(){
        if(!isInt(this.state.height)){
            this.state.heightOk = false;
        }else{
            this.state.heightOk = true;
            this.state.item.height = parseInt(this.state.height,10);
        }
        this.update();
    }
    exports.onWeightBlur = function(){
        if(!isFloat(this.state.weight)){
            this.state.weightOk = false;
        }else{
            this.state.weightOk = true;
            this.state.item.weight = parseFloat(this.state.weight);
        }
        this.update();
    }
    exports.onRentBlur = function(){
        if(!isFloat(this.state.rent)){
            this.state.rentOk = false;
        }else{
            this.state.rentOk = true;
            this.state.item.rent = parseFloat(this.state.rent);
        }
        this.update();
    }
    exports.onFactoryPriceBlur = function(){
        if(this.state.factoryPriceOk = isFloat(this.state.factoryPrice)){
            this.state.item.factoryPrice = parseFloat(this.state.factoryPrice);
        }
        this.update();
    }

    exports.onUniversalAddClick = function(i){
        switch(i){
            case "1":
                this.increase();
                break;
            case "2":
                this.createItem();
                break;
        }
    }

    exports.increase = function(){
        this.state.increase = {type:"add",count:"",countOk:true}
        this.update();
    }
    exports.decrease = function(){
        this.state.increase = {type:"remove",count:"",countOk:true}
        this.update();
    }

    exports.cancelIncrease = function(){
        delete this.state.increase;
        this.update();
    }

    exports.confirmIncrease = function(){
        var self = this;
        if(/^[0-9]+$/.test(this.state.increase.count) && (this.state.increase.type=="add" || parseInt(this.state.increase.count,10) <= this.state.stock)){
            client.increaseEquipmentCount(this.state.item._id,{type:this.state.increase.type,count:parseInt(this.state.increase.count,10)},function(err){
                delete self.state.increase;
                self.loadStock();
            });
        }else{
            this.state.increase.countOk = false;
            this.update();
        }
    }

    exports.createItem = function(){
        var self = this;
        client.createEquipment(this.state.item._id,{},function(err,id){
            if(err) return;
            visit("/equipment/"+self.state.item._id+"/"+id);
        });
    }

    exports.editItem = function(equipment){
        var self = this;
        return function(){
            visit("/equipment/"+self.state.item._id+"/"+equipment.id);
        }
    }

    exports.deleteItem = function(item){
        var self = this;
        return function(){
            client.deleteEquipment(self.state.item._id,item.id,function(err){
                if(err) return;
                for(var i = 0; i < self.state.items.length; i++){
                    if(self.state.items[i].id == item.id){
                        self.loadStock();
                        self.loadItems();
                        break;
                    }
                }
            })
        }
    }
    
    exports.addContents = function(){
        this.state.addcontents = {type:null};
        this.update();
    }
    
    exports.findTypes = function(input,cb){
        client.findEquipmentTypes({search:input},function(err,types){
            cb(err,{options:types.map(function(type){return {value:type._id,label:type.name}})})
        });
    }
    
    exports.onEquipmenttypeChanged = function(id,selection){
        this.state.item.contents = selection.map(function(sel){return {_id:sel.value,name:sel.label}});
        this.update();
    }
    
    exports.findTags = function(name,cb){
        client.findEquipmentTags(name,function(err,tags){
            var options = tags.map(function(tag){return {value:tag,label:tag}});
            if(name.length && tags.indexOf(name) < 0) options.push({value:name,label:"Tag '"+name+"' erstellen"});
            cb(err,{options:options});
        });
    }
    
    exports.onTagsChanged = function(id,tags){
        this.state.item.tags = tags.map(function(tag){
            return tag.value
        });
        this.update();
    }
    
    exports.onContentsChange = function(e){
        switch(e.target.value){
            case "none":
                this.state.item.contents = null;
                break;
            case "specific":
                this.state.item.contents = [];
                break;
            case "all":
                this.state.item.contents = "*";
                break;
        }
        this.update();
    }
    
    exports.createAreaPath = function(cap,timeline,fill){
        var path = "";
        
        var start = 0;
        var before = 0;
        var end = 0;
        var week = this.state.end-this.state.start;
        
        for(var time in timeline){
            time = parseInt(time,10);
            if(time < this.state.start){
                before = start = end = timeline[time];
            }else if(time <= this.state.end){
                end = timeline[time];
                path += 100*(time-this.state.start)/week+","+(100-before/cap.range*100)+" "+100*(time-this.state.start)/week+","+(100-end/cap.range*100)+" ";
                before = end;
            }
        }        
        return (fill?"M0,100L":"M")+"0,"+(100-start/cap.range*100)+" "+path+"100,"+(100-end/cap.range*100)+(fill?" 100,100Z":"");
    }
    
    var caps = {
        5:1,
        10:2,
        25:5,
        50:10,
        75:15,
        100:20
    }
    
    exports.steps = function(cap){
        var steps = [];
        for(var i = cap.step; i <= cap.max; i+=cap.step){
            steps.push(i);
        }
        return steps;
    }
    
    exports.days = function(){
        var day = 1000*60*60*24;
        var days = [];
        for(var i = this.state.start; i <= this.state.end; i+=day){
            days.push(new Date(i).getDate());
        }
        return days;
    }
    
    exports.max = function(timeline){
        var max = 0;
        for(var time in timeline){
            if(timeline[time] > max) max = timeline[time];
        }
        return max;
    }
    
    exports.cap = function(graphs){
        var max = 0;
        for(var i = 0; i < graphs.length; i++){
            var m = this.max(graphs[i]);
            if(m > max) max = m;
        }
        
        for(var cap in caps){
            cap = parseInt(cap,10);
            if(max < cap) return {max:cap,range:cap,step:caps[cap]};
        }
    }
    
    exports.graphForward = function(){
        this.state.start = this.state.end+1;
        this.state.end = moment(this.state.start).endOf("month").toDate().getTime();
        this.update();
    }
    exports.graphBackward = function(){
        this.state.end = this.state.start-1;
        this.state.start = moment(this.state.end).startOf("month").toDate().getTime();
        this.update();
    }
    
    
    
    exports.cancel = function(){
        history.back();
    }

    exports.save = function(){
        client.saveEquipmentType(this.state.item._id,{
            name:this.state.item.name,
            category:this.state.item.category,
            tags:this.state.item.tags,
            manufacturer:this.state.item.manufacturer,
            manufacturerArticlenumber:this.state.item.manufacturerArticlenumber,
            manufacturerEAN:this.state.item.manufacturerEAN,
            technicalDescription:this.state.item.technicalDescription,
            weight:this.state.item.weight,
            length:this.state.item.length,
            width:this.state.item.width,
            height:this.state.item.height,
            rent:this.state.item.rent,
            factoryPrice:this.state.item.factoryPrice,
            image:this.state.item.image?this.state.item.image.url:undefined,
            contents:this.state.item.contents?(this.state.item.contents instanceof Array?this.state.item.contents.map(function(type){return type._id}):"*"):null
        },function(err){
            if(err) return true;
            back(true);
        });
    }
