.container
	br
	BackButton
	h2 Offerte
	if this.offer
		Context(target=this.offer)
			.form-horizontal
				Binding(name="location")
					FormGroup(label="Ort" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
				Binding(name="date")
					FormGroup(label="Datum" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="expiration")
					FormGroup(label="Gültig bis" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="person")
					FormGroup(label="Kontakt" labelClass="col-sm-2" wrapperClass="col-sm-10")
						ContactBox
				Binding(name="user")
					FormGroup(label="Benutzer" labelClass="col-sm-2" wrapperClass="col-sm-10")
						ContactBox
				ul.nav.nav-tabs
					li(className=this.project?"":"active")
						a(onClick=this.selectProject.bind(this,null)) Übersicht
					each project in this.offer.projects
						li(className=project==this.project?"active":"")
							a(onClick=this.selectProject.bind(this,project))= project.name
					li
						a(onClick=this.addProject.bind(this))
							.glyphicon.glyphicon-plus
				if this.project
					Context(name="projects")
						Context(name=this.offer.projects.indexOf(this.project)+"")
							div
								br
								br
								.form-horizontal
									Binding(name="name")
										FormGroup(label="Name" labelClass="col-sm-2" wrapperClass="col-sm-10")
											Input(type="text")
								.row
									.col-sm-6
										.form-horizontal
											Binding(name="deliveryType" onChange=this.forceUpdate.bind(this,undefined))
												FormGroup(label="Übergabe" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Input(type="select")
														option(value="delivery") Stutz Event Lighting
														option(value="pickup") Kunde
											Binding(name="deliveryDate")
												FormGroup(label="Übergabedatum" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Date
											Binding(name="deliveryLocation")
												FormGroup(label="Übergabeort" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Input(type="textarea")
									.col-sm-6
										.form-horizontal
											Binding(name="returnType" onChange=this.forceUpdate.bind(this,undefined))
												FormGroup(label="Rückgabe" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Input(type="select")
														option(value="pickup") Stutz Event Lighting
														option(value="delivery") Kunde
											Binding(name="returnDate")
												FormGroup(label="Rückgabedatum" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Date
								.row
									.col-sm-6
										.form-horizontal
											Binding(name="servicesUs")
												FormGroup(label="Unsere Leistungen" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Input(type="textarea")
									.col-sm-6
										.form-horizontal
											Binding(name="servicesCustomer")
												FormGroup(label="Ihre Leistungen" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Input(type="textarea")
								.row
									.col-sm-6
										.form-horizontal
											Binding(name="factor" onChange=this.recalculate.bind(this))
												FormGroup(label="Faktor" labelClass="col-sm-4" wrapperClass="col-sm-8")
													Number
								each section,sectionId in this.project.sections
									h4= sections[sectionId]
									table.table.table-striped
										thead
											tr
												th(colSpan="2") Name
												th(style="width:70px") Menge
												th(style="width:100px") Stückpreis
												th(style="width:120px") Betrag
										tbody
											each item,i in section.items
												Context(name="sections")
													Context(name=sectionId)
														Context(name="items")
															Context(name=i+"")
																tr
																	td(colSpan="2")
																		Binding(name="name")
																			Input(type="text")
																	td
																		Binding(name="count" onChange=this.recalculate.bind(this))
																			Number
																	td
																		Binding(name="rate" onChange=this.recalculate.bind(this))
																			Number
																	td= money.format(item.total)
																		.btn.btn-default.pull-right(onClick=this.removeItem.bind(this,section.items,item))
																			.glyphicon.glyphicon-trash
											tr
												th(colSpan="4") Subtotal
												td= money.format(section.totalBeforeDiscount)
													if sectionId == "equipment"
														AddEquipment.btn-default(wrapperClass="pull-right" filter=this.filterEquipmentTypes.bind(this) onSelect=this.onAddEquipment.bind(this))
															.glyphicon.glyphicon-plus
													else
														.btn.btn-default.pull-right(onClick=this.addItem.bind(this,sectionId))
															.glyphicon.glyphicon-plus
											if sectionId=="equipment"
												tr
													th(colSpan="2") Faktor
													td= this.project.factor
													td= money.format(section.totalBeforeDiscount)													
													td= money.format(section.factorTotal)
											+renderDiscounts(section.discounts)
											tr
												th(colSpan="4") Total
												td= money.format(section.total)
													.btn.btn-default.pull-right(onClick=this.addDiscount.bind(this,section.discounts))
														.glyphicon.glyphicon-plus
								h4 Projektzusammenfassung
								table.table.table-striped
									thead
										tr
											th(colSpan="4") Kategorie
											th Betrag
									tbody
										each section,sectionId in this.project.sections
											tr
												td(colSpan="4")= sections[sectionId]
												td= money.format(section.total)
										tr
											th(colSpan="4") Subtotal
											th= money.format(this.project.totalBeforeDiscount)
												.btn.btn-default.pull-right(onClick=this.addDiscount.bind(this,this.project.discounts))
													.glyphicon.glyphicon-plus
										+renderDiscounts(this.project.discounts)
										tr
											th(colSpan="4") Total
											th= money.format(this.project.total)
								.btn-toolbar.pull-right
									.btn.btn-warning(onClick=this.deleteProject.bind(this)) Teilprojeklt löschen
				else
					table.table.table-striped
						thead
							tr
								th Name
								th
								th
								th
								th Betrag
						tbody
							each project in this.offer.projects
								tr
									td= project.name
									td
									td
									td
									td= money.format(project.total)
							tr
								th Subtotal
								td
								td
								td
								th= money.format(this.offer.totalBeforeDiscount)
									.btn.btn-default.pull-right(onClick=this.addDiscount.bind(this,this.offer.discounts))
										.glyphicon.glyphicon-plus
							+renderDiscounts(this.offer.discounts)
							tr
								th Mehrwertsteuer (7.7%)
								td
								td
								td
								td= money.format(this.offer.taxAmount)
							tr
								th Total
								th
								th
								th
								th= money.format(this.offer.total)
					.btn-toolbar.pull-right
						if this.offer._id
							.btn.btn-danger(onClick=this.delete.bind(this)) Löschen
						if this.docs.length
							.btn.btn-default(onClick=this.editDocx.bind(this)) DOCX editieren
						.btn.btn-primary(onClick=this.save.bind(this)) Speichern
	if this.editing
		Editor(document=this.editing close=this.closeDocx.bind(this) save=this.saveDocx.bind(this))
mixin renderDiscounts(discounts)
	each discount in discounts
		Context(target=discount)
				tr
					td
						Binding(name="name")
							Input(type="text")
					td
						Binding(name="amount" onChange=this.recalculate.bind(this))
							Number
					td
						Binding(name="type" onChange=this.recalculate.bind(this))
							Input(type="select")
								option(value="percent") %
								option(value="chf") CHF
					td= money.format(discount.total)
					td= money.format(discount.subTotal)
						.btn.btn-default.pull-right(onClick=this.removeDiscount.bind(this,discounts,discount))
							.glyphicon.glyphicon-trash
script.
	var client = require("../client");
	var {Context,Binding} = require("react-bicon");
	var FormGroup = require("./formgroup");
	var Input = require("./input");
	var Date = require("./datefield");
	var money = require("./money");
	var Number = require("./numberfield");
	var ContactBox = require("./ContactBox");
	var AddEquipment = require("./AddEquipmentButton");
	var util = require("../util");
	var Template = require("../docxtemplater");
	var Zip = require("jszip");
	var Editor = require("./editor");
	var moment = require("moment");
	var BackButton = require("./backbutton");
	
	var defaultSubproject = {
		name:"Teilprojekt",
		deliveryType:"delivery",
		deliveryDate:null,
		deliveryLocation:"",
		returnType:"pickup",
		returnDate:null,
		servicesUs:"",
		servicesCustomer:"",
		sections:{},
		discounts:[],
		factor:1
	}
	
	var sections = {
		"equipment":"Equipment",
		"services":"Dienstleistungen",
		"transportation":"Transport",
		"consumables":"Verbrauchsmaterial"
	}
	
	var defaultSection = {
		items:[],
		discounts:[]
	}
	
	for(var section in sections){
		defaultSubproject.sections[section] = defaultSection;
	}
	
	var defaultItem = {
		name:"",
		count:1,
		rate:0
	}	
script(section="body").
	constructor(props,context){
		super(props,context);
		this.componentWillReceiveProps(props);
	}
	async componentWillReceiveProps(props){
		this.types = util.createIndex(await client.findEquipmentTypes({}),"_id");
		this.categories = util.createIndex(await client.getEquipmentCategories(),"_id");
		if(props.offer == "new"){
			this.offer = {
				project: props.project,
				location:"",
				date:null,
				expiration:null,
				person:null,
				user: client.session.user._id,
				projects:[
					JSON.parse(JSON.stringify(defaultSubproject))
				],
				discounts:[]
			};
			this.project = this.offer.projects[0];
			this.docs = [];
		}else{
			this.offer = await client.getOffer(props.offer);
			if(!this.offer.user) this.offer.user = client.session.user._id;
			this.docs = await client.getDocuments("offers."+this.offer._id);
		}
		this.recalculate();
	}
	
	addProject(){
		this.offer.projects.push(JSON.parse(JSON.stringify(defaultSubproject)));
		this.project = this.offer.projects[this.offer.projects.length-1];
		this.recalculate();		
	}
	
	selectProject(project){
		this.project = project;
		this.forceUpdate();
	}
	
	filterEquipmentTypes(type){
		return !this.project.sections.equipment.items.filter(i=>(i.type||i.category) == type._id).length
	}
	
	async onAddEquipment(items){
		for(var item of items){
			var type = (item.kind=="type"?this.types:this.categories)[item._id];
			var entry = {
				name:(type.manufacturer?(type.manufacturer+" "):"")+type.name,
				section:"equipment",
				count:1,
				rate:0
			}
			if(item.kind == "type"){
				entry.rate = this.types[item._id].rent;
				entry.type = parseFloat(item._id);
			}else{
				entry.category = item._id;
			}
			this.project.sections.equipment.items.push(entry);
		}
		this.recalculate();
	}
	
	addItem(section){
		var item = JSON.parse(JSON.stringify(defaultItem));
		item.section = section;
		this.project.sections[section].items.push(item);
		this.recalculate();
	}
	
	removeItem(items,item){
		items.splice(items.indexOf(item),1);
		this.recalculate();
	}
	
	deleteProject(){
		this.offer.projects.splice(this.offer.projects.indexOf(this.project),1);
		delete this.project;
		this.recalculate();
	}
	
	addDiscount(discounts){
		discounts.push({
			name:"Rabatt",
			amount:10,
			type:"percent"
		})
		this.recalculate();
	}
	
	removeDiscount(discounts,discount){
		discounts.splice(discounts.indexOf(discount),1);
		this.recalculate();
	}
	
	calculateDiscounts(item){
		item.total = item.totalBeforeDiscount;
		for(var discount of item.discounts){
			discount.total = -(discount.type=="percent"?item.totalBeforeDiscount/100*discount.amount:discount.amount);
			discount.subTotal = item.total = item.total+discount.total;
			item.total = discount.subTotal;
		}
	}
	
	recalculate(){
		this.offer.totalBeforeDiscount = 0;
		for(var p of this.offer.projects){
			p.totalBeforeDiscount = 0;
			for(var section in p.sections){
				var sec = p.sections[section];
				sec.totalBeforeDiscount = 0;
				for(var i of sec.items){
					i.total = (i.count||0)*(i.rate||0);
					sec.totalBeforeDiscount += i.total;
				}
				if(section == "equipment"){
					var tbd = sec.totalBeforeDiscount;
					sec.totalBeforeDiscount *= p.factor||1;
					sec.factorTotal = sec.totalBeforeDiscount;
				}
				this.calculateDiscounts(sec);
				if(section == "equipment"){
					sec.totalBeforeDiscount = tbd;
				}
				p.totalBeforeDiscount += sec.total;
			}
			this.calculateDiscounts(p);
			this.offer.totalBeforeDiscount += p.total;
		}
		this.calculateDiscounts(this.offer);
		this.offer.taxAmount = this.offer.total*0.077;
		this.offer.totalBeforeTax = this.offer.total;
		this.offer.total += this.offer.taxAmount;
		this.offer.total = Math.round(this.offer.total*20)/20;
		
		this.forceUpdate();
	}
	
	async save(){
		if(this.offer._id){
			await client.updateOffer(this.offer._id,this.offer)
			await this.renderTemplate();
		}else{
			this.offer._id = await client.createOffer(this.offer);
			await this.renderTemplate();
			this.props.onCreate(this.offer._id);
		}
	}
	
	renderDate(days){
		return moment.utc(days * 24*60*60*1000).format("DD.MM.YYYY");
	}
	
	async renderTemplate(){	
		var project = (await client.getProject(this.props.project)).project;
		var contact = await client.getContact(this.offer.person);
		var user = await client.getContact(this.offer.user);
		var customer = await client.getContact(project.customer);

		function addDiscounts(source,target){
			target.Subtotal = money.format(source.totalBeforeDiscount);
			target.Total = money.format(source.total);
			target.Projektnummer = customer._id+"."+project.projectNumber;
			target.BenutzerName = user.firstname+" "+user.lastname;
			target.BenutzerTelefon = user.phones[0]&&user.phones[0].number;
			target.BenutzerMail = user.emails[0]&&user.emails[0].email;
			target.AnsprechpersonName = contact.firstname+(contact.lastname?" "+contact.lastname:"");
			target.AnsprechpersonTelefon = contact.phones[0]&&contact.phones[0].number;
			target.AnsprechpersonMail = contact.emails[0]&&contact.emails[0].email;
			for(var discount of source.discounts){
				target.Rabatte.push({
					Name: discount.name+(discount.type=="percent"?" "+discount.amount+"%":""),
					Betrag: money.format(discount.total),
					Subtotal: money.format(discount.subTotal)
				});
			}
		}
		var getCategory = (item)=>{
			return item.category||this.types[item.type].category+"";
		}
	
		var data = {
			Empfänger: customer.firstname+"\r\n"+customer.streetName+" "+customer.streetNr+"\r\n"+customer.zip+" "+customer.city,
			Ort: this.offer.location,
			Datum: this.renderDate(this.offer.date),
			Projektname: project.name,
			Ablaufdatum: this.renderDate(this.offer.expiration),
			Teilprojekte:[],
			Rabatte:[]
		}
		
		addDiscounts(this.offer,data);
		data.TotalNetto = money.format(this.offer.totalBeforeTax);
		data.MwSt = money.format(this.offer.taxAmount);
		
		for(var sp of this.offer.projects){
			var subproject = {
				Name: sp.name,
				Übergabetyp: sp.deliveryType=="delivery"?"Stutz Event Lighting":"Kunde",
				Übergabeort: sp.deliveryLocation.replace(/\r\n/g,"\n").replace(/\n/g,"\r\n"),
				Übergabedatum: this.renderDate(sp.deliveryDate),				
				Rückgabetyp: sp.returnType=="delivery"?"Kunde":"Stutz Event Lighting",
				Rückgabedatum: this.renderDate(sp.returnDate),
				"Unsere Leistungen": sp.servicesUs.replace(/\r\n/g,"\n").replace(/\n/g,"\r\n"),
				"Ihre Leistungen": sp.servicesCustomer.replace(/\r\n/g,"\n").replace(/\n/g,"\r\n"),
				Kategorien:[],
				Rabatte:[]				
			}
			addDiscounts(sp,subproject);
			data.Teilprojekte.push(subproject);
			for(var section in sections){
				var s = {
					Name: sections[section],
					Positionen: [],
					Rabatte: []
				};
				if(section == "equipment"){
					s.Equipment = true;
					s.Faktor = sp.factor||1;
					s.FaktorTotal = money.format(sp.sections[section].factorTotal);
				}
				addDiscounts(sp.sections[section],s)
				subproject.Kategorien.push(s);
				var items = sp.sections[section].items.slice();
				if(section == "equipment"){
					items.sort((a,b)=>{
						return getCategory(a).localeCompare(getCategory(b));
					})
				}
				var lastCategory = "";
				for(var item of items){
					if(section == "equipment"){
						var category = getCategory(item);
						if(category != lastCategory){
							s.Positionen.push({
								Titel: true,
								Name: this.categories[category].name
							})
							lastCategory = category;
						}
					}
					s.Positionen.push({
						Position: true,
						Name: item.name,
						Menge: item.count,
						Stückpreis: money.format(item.rate),
						Betrag: money.format(item.total)
					});
				}
			}
		}
		
		var docx = await client.getDocument((await client.getDocuments("templates.offer"))[0]._id);
		docx = await new Promise((s,e)=>{
			var reader = new FileReader();
			reader.onload = function(){
				s(reader.result);
			}
			reader.readAsArrayBuffer(docx);
		});
		
		docx = new Zip(docx);
		
		var template = new Template();
		template.load(docx);
		template.setData(data);
		template.render();

		docx = template.getZip().generate({type:"blob"});
		await this.saveDocx(docx);
	}
	
	editDocx(){
		this.editing = this.docs[0]._id;
		this.forceUpdate();
	}
	
	async saveDocx(file){
		for(var doc of this.docs){
			await client.deleteDocument(doc._id);
		}
		var doc = {
			entity:"offers."+this.offer._id,
			name:"Offerte.docx",
			file:await new Promise((s,e)=>{
				var reader = new FileReader();
				reader.onload = function(){
					s(reader.result);
				}
				reader.readAsDataURL(file);
			})
		};
		doc._id = await client.uploadDocument(doc)
		this.docs = [doc];
		this.forceUpdate();
	}
	
	closeDocx(){
		delete this.editing;
		this.forceUpdate();
	}
	
	async delete(){
		await client.deleteOffer(this.offer._id);
		history.back();
	}
