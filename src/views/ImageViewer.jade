.imageviewer(style="position:relative")
    if this.state.image
        img(src=this.state.image.url?this.state.image.url:this.state.image style="width:100%" onClick=this.enlarge.bind(this))
    else
        div(style="backgroundColor:grey;width:100%;height:250px")
    if this.props.editable
        input(type="file" style="display:none" ref="image" onChange=this.applyImage.bind(this))
        .btn.btn-default(style="position:absolute;top:5px;right:5px" onClick=this.choseImage.bind(this))
            i.glyphicon.glyphicon-pencil
    if this.state.enlarge
        div(style={position:"fixed",top:"0px",bottom:"0px",right:"0px",left:"0px",backgroundColor:"rgba(0,0,0,0.7)",backgroundImage:"url("+(this.state.image.url?this.state.image.url:this.state.image)+")",backgroundSize:"contain",backgroundRepeat:"no-repeat",backgroundPosition:"center",zIndex:"2000"} onClick=this.close.bind(this))
script(section="body").
    constructor(props,context){
        super(props,context);
        this.state = {image:this.props.image};
    }
    
    choseImage(e){
        this.refs.image.click();
    }

    applyImage(e){
        var self = this;
        var files = e.target.files;
        if(files.length && (files[0].type == "image/jpeg" || files[0].type == "image/jpg" || files[0].type == "image/png")){
            var reader = new FileReader();
            reader.onload = function(e) {
                self.state.image = {file:files[0],url:e.target.result}
                self.forceUpdate();
                self.props.onChange(self.state.image);
            }
            reader.readAsDataURL(files[0]);
        }
    }
    
    enlarge(){
        this.state.enlarge = true;
        this.forceUpdate();
    }
    
    close(){
        delete this.state.enlarge;
        this.forceUpdate();
    }
