.container
    h3 Profil
    - var route = this.props.route
    ul.nav.nav-tabs
        li(className=route.name=="details"?"active":"")
            a(onClick=this.goTo.bind(this,"")) Details
        li(className=route.name=="password"?"active":"")
            a(onClick=this.goTo.bind(this,"/password")) Passwort
        li(className=route.name=="permissions"?"active":"")
            a(onClick=this.goTo.bind(this,"/permissions")) Berechtigungen
        li(className=route.name=="documents"?"active":"")
            a(onClick=this.goTo.bind(this,"/documents")) Dokumente
    case route.name
        when "details"
            Contact(contact=this.props.user onContactSelected=this.props.onContactSelected)
        when "password"
            ChangePassword(contact=this.props.user)
        when "permissions"
            if this.user
                each permission,key in this.user.permissions
                    if client.hasPermission(key)
                        div
                            label
                                input(type="checkbox" checked=permission.allowed onChange=this.togglePermission.bind(this,permission))
                                = " "+permission.name
                .btn-toolbar
                    .btn.btn-primary(onClick=this.save.bind(this)) Speichern
        when "documents"
            Documents(entity="user-"+this.props.user)
script.
    var client = require("../client");
    var {Router} = require("react-route-system");
    var Contact = require("./contact");
    var ChangePassword = require("./changepassword");
    var Documents = require("./documents");
    
    Component.extensionSections = [];
    Component.router = new Router()
        .add("details","")
        .add("password","/password")
        .add("permissions","/permissions")
        .add("documents","/documents")
            
script(section="body").
    constructor(props,context){
        super(props,context);
        this.componentWillReceiveProps(props);
    }
    async componentWillReceiveProps(p){
        this.user = await client.getUser(p.user);
        this.forceUpdate();
    }
    goTo(path){
        this.props.location.replace(path);
    }
    
    togglePermission(permission,e){
        permission.allowed = e.target.checked;
        this.forceUpdate();
    }
    
    async save(){
        var permissions = {};
        for(var permission in this.user.permissions){
            permissions[permission] = this.user.permissions[permission].allowed;
        }        
        await client.saveUser(this.props.user,{
            permissions:permissions
        });
    }
