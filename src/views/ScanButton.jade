div(style="display:inline-block" className=this.props.className)
    .btn.btn-default(onClick=this.scan.bind(this))
        .glyphicon.glyphicon-barcode
    if this.type !== undefined
        Modal
            .modal-header
                h2 Equipment scannen
            .modal-body
                Context(target=this)
                    .form-horizontal
                        Binding(name="type" onChange=this.onEquipmenttypeChanged.bind(this))
                            FormGroup(label="Typ" labelClass="col-sm-2" wrapperClass="col-sm-10")
                                EquipmentTypeBox(ref="typefield")
                        if this.type
                            if this.hasOwnProperty("item")
                                Binding(name="item" onChange=this.forceUpdate.bind(this,undefined))
                                    FormGroup(label="Objekt" labelClass="col-sm-2" wrapperClass="col-sm-10")
                                        EquipmentItemBox(ref="countfield" type=this.type)
                            else
                                Binding(name="count" onChange=this.forceUpdate.bind(this,undefined))
                                    FormGroup(label="Menge" labelClass="col-sm-2" wrapperClass="col-sm-10")
                                        IntegerField(ref="countfield")
            .modal-footer
                button.btn.btn-default(onClick=this.cancelScan.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.confirmScan.bind(this) disabled=(!this.type || !(this.count>0||this.item))) Scannen
script.
    var OverlayTrigger = require("react-bootstrap/lib/OverlayTrigger");
    var Popover = require("react-bootstrap/lib/Popover");
    var FormGroup = require("./formgroup");
    var {Context,Binding} = require("react-bicon");
    var EquipmentTypeBox = require("./EquipmentTypeBox");
    var EquipmentItemBox = require("./EquipmentItemBox");
    var IntegerField = require("./IntegerField");
    var client = require("../client");
    var Modal = require("./Modal");
script(section="body").   
    componentDidMount(){
        document.addEventListener("keydown",this.onKeyDown = function(e){
            if(this.type !== undefined && e.keyCode == 13) this.confirmScan();
        }.bind(this))
    }
    
    componentWillUnmount(){
        document.removeEventListener("keydown",this.onKeyDown);
    }
    
    scan(){
        this.type = null;
        this.forceUpdate();
        this.focusTypeField();
    }
    
    async onEquipmenttypeChanged(){
        this.stock = await client.getEquipmentTypeItems(this.type);
        if(this.stock.length && this.props.supplier == "own"){
            this.item = this.stock[0].id;
            delete this.count;
        }else{
            this.count = 1;
            delete this.item;
        }
        this.forceUpdate();
        this.focusCountField();
    }
    
    onValueChanged(e){
        this.type.value = parseFloat(e.target.value)||0;
        this.forceUpdate();
    }
    
    cancelScan(){
        delete this.type;
        this.forceUpdate();
    }
    
    confirmScan(){
        var scan = {kind:"EQ",type:this.type};
        if(this.hasOwnProperty("count")){
            scan.count = this.count;
        }else{
            scan.item = this.item;
        }
        this.props.onScan(scan);
        this.cancelScan(); 
    }
    
    focusTypeField(){
        setTimeout(function(){
            this.refs.typefield.focus();
        }.bind(this),100)
    }
    
    focusCountField(){
        setTimeout(function(){
            this.refs.countfield.focus();
        }.bind(this),100)
    }
