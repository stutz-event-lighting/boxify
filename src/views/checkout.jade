extends ./base

append body
    if this.state.data
        .container
            h2 Warenausgang
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel.bind(this))
                        i.glyphicon.glyphicon-chevron-left
                        |  Abbrechen
                    button.btn.btn-primary(onClick=this.finish.bind(this))
                        i.glyphicon.glyphicon-ok
                        |  Abschliessen
            .row
                .col-xs-12
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Person
                            .col-lg-10
                                ContactBox(value=this.state.data.person onChange=this.onPersonChanged.bind(this) type="person" disabled=!this.state.data.draft)
            .row
                .col-xs-12.col-md-8
                    h3 Equipment
                    table.table.table-striped.table-hover
                        thead
                            tr
                                th ID
                                th Name
                                each supplier in this.state.suppliers
                                    th
                                        img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                                th Total
                        tbody
                            each type in this.state.data.types
                                if type.needed !== undefined || type.count > 0
                                    tr(onClick=this.startScan(type._id) className=((this.state.data.types[type._id].needed&&this.state.data.types[type._id].needed>(this.state.data.types[type._id].count||0))?"danger":""))
                                        td= type._id
                                        td= type.name
                                        each supplier in this.state.suppliers
                                            td
                                                = ((this.state.data.types[type._id].suppliers && this.state.data.types[type._id].suppliers[supplier])?(this.state.data.types[type._id].suppliers[supplier].count||"0"):"0")
                                                | /
                                                = ((this.state.data.types[type._id].suppliers && this.state.data.types[type._id].suppliers[supplier])?this.state.data.types[type._id].suppliers[supplier].available:0)
                                        td
                                            = this.state.data.types[type._id].count||"0"
                                            if this.state.data.types[type._id].needed
                                                = "/"+this.state.data.types[type._id].needed
                .col-md-4
                    .pull-left
                        h3 Verlauf
                    if this.state.data.draft
                        .btn-toolbar.pull-right(style="marginTop:18px")
                            DropdownButton(title=this.renderSupplierButtonTitle(null,null,this.state.supplier||"own")[0] onSelect=this.setSupplier.bind(this))        
                                each supplier in this.state.allsuppliers
                                    MenuItem(eventKey=supplier)
                                        img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                            ScanButton.pull-left(onScan=this.handleScan.bind(this) supplier=this.state.supplier ref="scanbutton")
                            QuaggaButton.pull-left.visible-xs(onScan=this.onQuaggaScan.bind(this))
                    table.table.table-striped.table-hover
                        thead
                            th
                            th Name
                            th
                        tbody
                            each entry,i in this.state.data.history.slice().reverse()
                                tr
                                    td
                                        img(src="/api/contacts/"+entry.supplier+"/image" style="height:20px")
                                    td
                                        +renderLogEntry(entry,0)
                                    td
                                        if this.state.data.draft
                                            .btn.btn-xs.btn-default(onClick=this.remove(i))
                                                .glyphicon.glyphicon-trash
    if this.state.entry
        Modal
            .modal-header Bitte wählen
            .modal-body
                table.table.table-striped
                    thead
                        tr
                            th(style="width:85%") Objekt
                            th Menge
                    tbody
                        +renderEntry(this.state.entry,0)
            .modal-footer
                .btn.btn-default(onClick=this.cancelAdd.bind(this)) Abbrechen
                .btn.btn-primary(onClick=this.applyAdd.bind(this)) Bestätigen
mixin renderLogEntry(entry,level)
    if entry.items
        each contents,item in entry.items
            div(style="paddingLeft:"+(level*20)+"px")
                = this.state.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderLogEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            b= entry.count+" "
            = this.state.data.types[entry.type].name
mixin renderSupplierButtonTitle(supplier)
    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
mixin renderEntry(entry,level)
    if entry.items
        each contents, item in entry.items
            tr
                td(style="paddingLeft:"+(level*20)+"px")
                    input(type="checkbox" checked=entry.checked[item] onClick=this.onCheckedChanged(entry,item))
                    = this.state.data.types[entry.type].name
                    b= " # "+item
                td
            each subentry in contents
                +renderEntry(subentry,level+1)
    else
        tr
            td(style="paddingLeft:"+(level*20)+"px")
                input(type="checkbox" checked=entry.checked onClick=this.onCheckedChanged(entry))
                = this.state.data.types[entry.type].name
            td
                .input-group.input-group-sm
                    Input.form-control(type="text" value=entry.count onChange=this.onCountChanged(entry) selectOnFocus=true)
                    .input-group-addon="/ "+entry.max
script.
    var client = require("../client");
    var async = require("async");
    var ScanButton = require("./ScanButton");
    var async = require("async");
    var DropdownButton = require("react-bootstrap/lib/DropdownButton");
    var MenuItem = require("react-bootstrap/lib/MenuItem");
    var QuaggaButton = require("./QuaggaButton");
    var bs = require("../barcodescanner");
    var ContactBox = require("./ContactBox");
    var Modal = require("./Modal");
    var Input = require("./Input");
script(section="body").
    getNeededPermissions(){
        return ["projects_read"];
    }
    
    componentDidMount(){
        if(!this.state.data) this.loadData();
    }
    
    loadData(){
        client.getCheckout(this.props.params.checkout,function(err,data){
            if(err) return;
            this.state.data = data;
            this.calculateSuppliers();
            var suppliers = {};
            for(var type in this.state.data.types){
                for(var supplier in this.state.data.types[type].suppliers) suppliers[supplier] = true;
            }
            this.state.allsuppliers = Object.keys(suppliers);
            this.state.supplier = "own";
            data.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
            for(var type in data.types){
                type = parseInt(type,10);
                var category = data.categories[data.types[type].category];
                if(!category.types) category.types = [];
                category.types.push(type);
            }

            this.update();
        }.bind(this));
    }
    
    onPersonChanged(id){
        this.state.data.person = id;
        this.forceUpdate();
        this.save();
    }
    
    calculateSuppliers(){
        var suppliers = {};
        for(var type in this.state.data.types){
            if(this.state.data.types[type].count || this.state.data.types[type].needed)
            for(var supplier in this.state.data.types[type].suppliers) suppliers[supplier] = true;
        }
        this.state.suppliers = Object.keys(suppliers);
    }
    
    setSupplier(supplier){
        this.state.supplier = supplier;
        this.update();
    }
    
    startScan(type){
        return function(){
            this.refs.scanbutton.scan();
            this.refs.scanbutton.onEquipmenttypeChanged({value:type,label:this.state.data.types[type].name});
        }.bind(this)
    }
        
    onQuaggaScan(code){
        bs.parse(code);
    }
    
    handleScan(code){
        if(!this.state.data.draft) return;
        if(code.kind == "EQ" && this.state.data.types[code.type]){
            if(!code.supplier) code.supplier = this.state.supplier;
            var entry = {
                supplier:code.supplier||"own",
                type:code.type,
                count:code.count||1
            };
            
            if(this.state.entry){
                var subentries = [this.state.entry];
                var entries = this.findItem(subentries,code.type,code.item);
                if(entries){
                    var e = this.getEntryOfType(entries,code.type);
                    this.setChecked(!this.getChecked(e,code.item),e,code.item);
                    return this.update();
                }else{
                    this.applyAdd();
                }
            }
            
            if(code.item){
                this.getEntryContents(entry,[code.item],function(err){
                    if(err) return this.playErrorSound();
                    this.state.entry = entry;
                    this.addCheckedInformation(entry);
                    this.update();
                }.bind(this));
            }else if(entry.supplier == "own" && this.state.data.types[entry.type].hasItems){
                return this.playErrorSound();
            }else{
                this.add(entry);
            }           
        }
    }
    
    getEntryContents(entry,items,cb){
        async.each(items,function(item,cb){
            client.getEquipment(entry.type,item,function(err,item){
                if(err) return cb(err);
                item = item.item;
                if(!entry.items) entry.items = {};
                async.map(Object.keys(item.contents),function(type,cb){
                    type = parseFloat(type);
                    var subentry = {
                        supplier:entry.supplier,
                        type:type,
                        count:item.contents[type].count
                    };
                    if(item.contents[type].ids){
                        this.getEntryContents(subentry,item.contents[type].ids,function(err){
                            if(err) return cb(err);
                            cb(null,subentry);
                        }.bind(this));
                    }else{
                        cb(null,subentry);
                    }
                }.bind(this),function(err,items){
                    if(err) return cb(err);
                    entry.items[item.id] = items;
                    cb();
                }.bind(this))
            }.bind(this))
        }.bind(this),cb);
    }
    
    calculateEntryTotal(entry,total){
        total = total||{};
        if(!total[entry.type]) total[entry.type] = {count:0};
        total[entry.type].count += entry.count;
        for(var item in entry.items){
            item = parseInt(item,10);
            if(!total[entry.type].ids) total[entry.type].ids = [];
            if(total[entry.type].ids.indexOf(item) < 0) total[entry.type].ids.push(item);
            for(var i = 0; i < entry.items[item].length; i++){
                this.calculateEntryTotal(entry.items[item][i],total);
            }
        }
        return total;
    }
    
    checkAvailability(supplier,total){
        for(var type in total){
            if(
                !this.state.data.types[type].suppliers ||
                !this.state.data.types[type].suppliers[supplier] ||
                ((this.state.data.types[type].suppliers[supplier].available||0) - (this.state.data.types[type].suppliers[supplier].count||0)) < total[type].count
            ){
                return false;
            }
            if(total[type].ids){
                for(var i = 0; i < total[type].ids.length; i++){
                    if(
                        this.state.data.types[type].suppliers[supplier].ids &&
                        this.state.data.types[type].suppliers[supplier].ids.indexOf(total[type].ids[i]) >= 0
                    ){
                        return false;
                    }
                }
            }
        }
        return true;
    }
        
    add(entry){
        var total = this.calculateEntryTotal(entry);
        if(this.checkAvailability(entry.supplier,total)){
            for(var type in total){
                if(!this.state.data.types[type].count) this.state.data.types[type].count = 0;
                this.state.data.types[type].count += total[type].count;
                if(!this.state.data.types[type].suppliers[entry.supplier]) this.state.data.types[type].suppliers[entry.supplier] = {count:0,available:0}
                if(!this.state.data.types[type].suppliers[entry.supplier].count) this.state.data.types[type].suppliers[entry.supplier].count = 0;
                this.state.data.types[type].suppliers[entry.supplier].count += total[type].count;
                if(total[type].ids) {
                    if(!this.state.data.types[type].suppliers[entry.supplier].ids) this.state.data.types[type].suppliers[entry.supplier].ids = [];
                    Array.prototype.splice.apply(this.state.data.types[type].suppliers[entry.supplier].ids,[0,0].concat(total[type].ids));
                }
            }
            this.state.data.history.push(entry);
            this.calculateSuppliers();
            this.update();
            this.save();
        }else{
            this.playErrorSound();
        }
    }
    
    remove(index){
        return function(){
            var entry = this.state.data.history.splice(this.state.data.history.length-1-index,1)[0];
            var total = this.calculateEntryTotal(entry);
            for(var type in total){
                if(total[type].ids) {
                    for(var i = 0; i < total[type].ids.length; i++){
                        this.state.data.types[type].suppliers[entry.supplier].ids.splice(this.state.data.types[type].suppliers[entry.supplier].ids.indexOf(total[type].ids[i]),1);
                    }
                    if(!this.state.data.types[type].suppliers[entry.supplier].ids.length) delete this.state.data.types[type].suppliers[entry.supplier].ids;
                }
                this.state.data.types[type].suppliers[entry.supplier].count -= total[type].count;
                if(!this.state.data.types[type].suppliers[entry.supplier].count){
                    delete this.state.data.types[type].suppliers[entry.supplier].count;
                    if(!this.state.data.types[type].suppliers[entry.supplier].available && !this.state.data.types[type].suppliers[entry.supplier].needed) delete this.state.data.types[type].suppliers[entry.supplier];
                }
            
                this.state.data.types[type].count -= total[type].count;
                if(!this.state.data.types[type].count) delete this.state.data.types[type].count
            }
            this.calculateSuppliers();
            this.update();
            this.save();
        }.bind(this);
    }
    
    playErrorSound(){
        new Audio("/public/audio/error.wav").play();
    }

    cancel(){
        history.back();
    }

    save(){
        var data = {};
        for(var type in this.state.data.types){
            var t = this.state.data.types[type];
            if(!t.count) continue;
            data[type] = {
                count:t.count,
                suppliers:{}
            };
            for(var supplier in t.suppliers){
                if(!t.suppliers[supplier].count) continue;
                data[type].suppliers[supplier] = {
                    count:t.suppliers[supplier].count,
                    ids:t.suppliers[supplier].ids
                };
            }
        }
    
        client.updateEquipmentIo(this.props.params.checkout,{person:this.state.data.person,items:data,history:this.state.data.history},function(err){
            if(err) return true;
        });
    }
    
    finish(){
        client.finishEquipmentIo(this.props.params.checkout,function(err){
            if(err) return true;
            history.back();
        })
    }
    
    addCheckedInformation(entry){
        if(entry.items){
            entry.checked = {};
            for(var id in entry.items){
                entry.checked[id] = true;
                for(var i = 0; i < entry.items[id].length; i++){
                    this.addCheckedInformation(entry.items[id][i]);
                }                
            }
        }else{
            entry.checked = true;
            entry.max = entry.count;
        }
    }
    removeCheckedInformation(entries){
        for(var i = 0; i < entries.length; i++){
            var entry = entries[i];
            var keep = true;
            if(entry.items){
                for(var id in entry.items){
                    if(!entry.checked[id]){
                        this.setSource(entry.items[id],entry.type,id);
                        entries.push.apply(entries,entry.items[id]);
                        delete entry.items[id];
                    }else{
                        entry.items[id] = this.removeCheckedInformation(entry.items[id]);
                    }
                }
                entry.count = Object.keys(entry.items).length;
                keep = entry.count;
            }else{
                keep = entry.checked
            }
            if(keep){
                delete entry.checked;
                delete entry.max;
            }else{
                entries.splice(i--,1);
            }
        }        
        return entries;
    }
    
    setSource(entries,type,id){
        for(var i = 0; i < entries.length; i++){
            var entry = entries[i];
            if(entry.items){
                entries.splice(i,1);
                for(var itemId in entry.items){
                    var items = {};
                    var checked = {};
                    items[itemId] = entry.items[itemId];
                    checked[itemId] = entry.checked[itemId];
                    entries.splice(i++,0,{supplier:entry.supplier,type:entry.type,count:1,items:items,checked:checked})
                }
                i--;
            }else{
                entry.source = {type:type,item:parseFloat(id)};
            }
        }
    }
    
    onCheckedChanged(entry,id){
        return function(e){
            this.handleScan({kind:"EQ",type:parseFloat(entry.type),item:id});
        }.bind(this)
    }
    
    getChecked(entry,id){
        if(id){
            return entry.checked[id];
        }else{
            return entry.checked;
        }
    }
    
    setChecked(checked,entry,id){
        if(id){
            entry.checked[id] = checked
            this.setEntriesChecked(checked,entry.items[id]);
        }else{
            entry.checked = checked;
        }
    }
    
    setEntriesChecked(checked,entries){
        for(var i = 0; i < entries.length; i++){
            var entry = entries[i];
            if(entry.items){
                for(var id in entry.items){
                    this.setChecked(checked,entry,id);
                }
            }else{
                this.setChecked(checked,entry);
            }
        }
    }
    
    getEntryOfType(entries,type){
        for(var i = 0; i < entries.length; i++){
            var entry = entries[i];
            if(entry.type+"" == type+"") return entry;
        }
    }
    
    getSubEntries(entry){
        return entry.items[Object.keys(entry.items)[0]];
    }
    
    onCountChanged(entry){
        return function(e){
            var val = parseInt(e.target.value,10);
            if(isNaN(val)){
            
            }else if(val < 1){
                entry.count = 1;
            }else if(val > entry.max){
                entry.count = entry.max;
            }else{
                entry.count = val;
            }
            this.update();
        }.bind(this)
    }
    
    cancelAdd(){
        delete this.state.entry;
        this.update();
    }
    
    applyAdd(){
        var entry = this.state.entry;
        delete this.state.entry;
        var entries = this.removeCheckedInformation([entry]);
        entries.reverse().forEach(this.add.bind(this));
    }
    
    findItem(entries,type,id){
        for(var i = 0; i < entries.length; i++){
            var entry = entries[i];
            if(entry.type+"" == type+"" && (!id || entry.items[id])) return entries;
            if(entry.items){                
                for(var itemId in entry.items){
                    var subentries = this.findItem(entry.items[itemId],type,id);
                    if(subentries) return subentries;
                }
            }
        }   
    }
        
    allChecked(subentries){
        for(var i = 0; i < subentries.length; i++){
            var entry = subentries[i];
            if(entry.items){
                for(var id in entry.checked){
                    if(!entry.checked[id]) return false;
                }
            }else{
                if(!entry.checked) return false;
            }
        }
        return true;
    }
