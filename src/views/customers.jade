extends ./base

append body
    .container
        h1 Kunden
        .searchbar(style="display:flex")
            .input-group(style="flex:1;display:flex;width:auto;")
                input.form-control(type="text" style="display:block;width:auto;flex:1" onChange=this.search.bind(this) value=this.state.search||"")
                span.input-group-btn(style="display:inline-block;width:auto;")
                    button.btn.btn-default Suchen
            .btn-group(style="marginLeft:10px")
                CreateContactButton(callback=this.create.bind(this))
        table.table.table-striped.table-hover
            thead
                tr
                    th Name
                    th
            tbody
                each item in this.state.items
                    tr(onClick=this.edit(item))
                        td= (item.firstname?item.firstname+" ":"")+(item.lastname||"")
                        td
                            button.btn.btn-xs.btn-default.pull-right(onClick=this.delete(item))
                                i.glyphicon.glyphicon-trash
    if this.state.delete
        Modal
            .modal-header
                h2 Kunden löschen
            .modal-body= "Sind sie sicher, dass sie \""+this.state.delete.name+"\" löschen möchten?"
            .modal-footer
                button.btn.btn-default(onClick=this.cancelDelete.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.confirmDelete.bind(this)) Löschen
    if this.state.error
        Modal
            .modal-header
                h2 Ups!
            .modal-body                        
                case this.state.error
                    when 601
                        .alert.alert-warning Dieser Kunde ist noch Objekten zugewiesen. 
            .modal-footer
                button.btn.btn-primary(onClick=this.dismiss.bind(this)) Ich verstehe
script.
    var client = require("../client");
    var Modal = require("./Modal");
    var CreateContactButton = require("./CreateContactButton");
script(section="body").    
    getNeededPermissions(){
        return ["customers_read"];
    }
    
    constructor(props,context){
        super(props,context);
        this.searchCustomers();
    }
    
    
    async searchCustomers(){
        this.state.items = await client.findCustomers({search:this.state.search});
        this.update();
    }
    
    async create(id){
        await client.createCustomer(id);
        visit("/customers/"+id);
    }

    search(e){
        this.state.search = e.target.value;
        this.searchCustomers();
    }
    
    dismiss(){
        delete this.state.error;
        this.update();
    }
    
    edit(item){
        return function(e){
            if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
            visit("/customers/"+item._id)
        }        
    }

    delete(item){
        return function(){
            this.state.delete = item;
            this.update();
        }.bind(this)
    }

    cancelDelete(){
        delete this.state.delete;
        this.update();
    }
    async confirmDelete(){
        var del = this.state.delete;
        delete this.state.delete;
        try{
            await client.deleteCustomer(del._id);
            delete this.state.items;
        }catch(err){
            this.state.error = err.code;
        }
        this.update();
    }
