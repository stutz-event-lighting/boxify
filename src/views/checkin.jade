.container
    if this.state.data
        h2 Wareneingang
            .btn-toolbar.pull-right
                button.btn.btn-default(onClick=this.cancel.bind(this))
                    i.glyphicon.glyphicon-chevron-left
                    |  Abbrechen
                button.btn.btn-primary(onClick=this.finish.bind(this))
                    i.glyphicon.glyphicon-ok
                    |  Abschliessen
        .row
            .col-xs-12
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Person
                        .col-lg-10
                            ContactBox(value=this.state.data.person onChange=this.onPersonChanged.bind(this) type="person" disabled=!this.state.data.draft)
        .row
            .col-xs-12.col-md-8
                h3.pull-left Equipment
                .pull-right.checkbox(style="paddingTop:20px")
                    label
                        input(type="checkbox" checked=this.state.hideUnbooked onChange=this.onUnbookedChanged.bind(this))
                        |  Ungebuchte ausblenden
                table.table.table-striped.table-hover
                    thead
                        tr
                            th ID
                            th Name
                            each supplier in this.state.suppliers
                                th
                                    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                            th Total
                    tbody
                        each type in this.state.data.types
                            if (type.available !== undefined && !this.state.hideUnbooked) || type.count !== undefined
                                tr(onClick=this.startScan.bind(this,type._id) className=(type.available===type.count)?"success":"")
                                    td= type._id
                                    td= type.name
                                    each supplier in this.state.suppliers
                                        td
                                            = ((this.state.data.types[type._id].suppliers && this.state.data.types[type._id].suppliers[supplier])?(this.state.data.types[type._id].suppliers[supplier].count||"0"):"0")
                                            | /
                                            = ((this.state.data.types[type._id].suppliers && this.state.data.types[type._id].suppliers[supplier])?this.state.data.types[type._id].suppliers[supplier].available:0)
                                    td= (this.state.data.types[type._id].count||"0") + "/"+this.state.data.types[type._id].available
            .col-md-4
                .pull-left
                    h3 Verlauf
                if this.state.data.draft
                    .btn-toolbar.pull-right(style="marginTop:18px")
                        DropdownButton(title=this.renderSupplierButtonTitle(null,null,this.state.supplier||"own")[0] onSelect=this.setSupplier.bind(this))        
                            each supplier in this.state.allsuppliers
                                MenuItem(eventKey=supplier)
                                    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
                        ScanButton.pull-left(onScan=this.handleScan.bind(this) ref="scanbutton" supplier=this.state.supplier||"own")
                        QuaggaButton.pull-left.visible-xs(onScan=this.onQuaggaScan.bind(this))
                table.table.table-striped.table-hover
                    thead
                        tr
                            th
                            th Name
                            th
                    tbody
                        each entry,i in this.state.data.history.slice().reverse()
                            tr
                                td
                                    img(src="/api/contacts/"+entry.supplier+"/image" style="height:20px")
                                td
                                    +renderLogEntry(entry,0)
                                td
                                    if this.state.data.draft
                                        .btn.btn-xs.btn-default(onClick=this.remove.bind(this,i))
                                            .glyphicon.glyphicon-trash
    - this.scanreceiver = null;
    if this.state.entry
        Modal
            .modal-header
                h2 Case-Inhalt scannen
            .modal-body(style="maxHeight:500px;overflowY:auto")
                +renderCaseEntry(this.state.entry,0)
            .modal-footer
                button.btn.btn-default(onClick=this.cancelEntry.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.finishEntry.bind(this)) Fertig
mixin renderLogEntry(entry,level)
    if entry.items
        each contents,item in entry.items
            div(style="paddingLeft:"+(level*20)+"px")
                = this.state.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderLogEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            b= entry.count+" "
            = this.state.data.types[entry.type].name
mixin renderSupplierButtonTitle(supplier)
    img(src="/api/contacts/"+supplier+"/image" style="height:20px")
mixin renderCaseEntry(entry,level)
    -var parentscanreceiver = this.scanreceiver;
    if entry.items
        each contents,item in entry.items
            - this.scanreceiver = {parent:parentscanreceiver,contents:contents, entry:entry}
            div(style="paddingLeft:"+(level*20)+"px")
                = this.state.data.types[entry.type].name
                b= " #"+item
            each subentry in contents
                +renderCaseEntry(subentry,level+1)
    else
        div(style="paddingLeft:"+(level*20)+"px")
            input.form-control(type="text" value=entry.count style="width:50px;display:inline-block" onChange=this.onCountChanged.bind(this,entry) onFocus=this.select)
            = " "+this.state.data.types[entry.type].name                
script.
    var client = require("../client");
    var ScanButton = require("./ScanButton");
    var Modal = require("./Modal");
    var DropdownButton = require("react-bootstrap/lib/DropdownButton");
    var MenuItem = require("react-bootstrap/lib/MenuItem");
    var QuaggaButton = require("./QuaggaButton");
    var bs = require("../barcodescanner");
    var ContactBox = require("./ContactBox");
script(section="body").    
    getNeededPermissions(){
        return ["projects_read"];
    }
    
    constructor(props,context){
        super(props,context);
        this.state = {};
        this.state.supplier = "own";
    }
    
    componentDidMount(){
        if(!this.state.data) this.loadData();
    }
    
    async loadData(){
        var data = await client.getCheckin(this.props.checkin);
        this.state.data = data;
        this.state.hideUnbooked = !this.state.data.draft;
        var suppliers = {};
        for(var type in this.state.data.types){
            for(var supplier in this.state.data.types[type].suppliers) suppliers[supplier] = true;
        }
        this.state.suppliers = this.state.allsuppliers = Object.keys(suppliers);
        this.forceUpdate();
    }   
    
    onPersonChanged(id){
        this.state.data.person = id;
        this.forceUpdate();
        this.save();
    }
    
    onUnbookedChanged(e){
        this.state.hideUnbooked = e.target.checked;
        this.forceUpdate();
    }
    
    select(e){
        setTimeout(e.target.select.bind(e.target));;
    }
    
    onCountChanged(entry,e){
        var count = parseInt(e.target.value,10);
        if(!isNaN(count)){
            entry.count = count;
        }
        this.forceUpdate();
    }
    
    setSupplier(supplier){
        this.state.supplier = supplier;
        this.forceUpdate();
    }
    
    startScan(type){
        this.refs.scanbutton.scan();
        this.refs.scanbutton.type = type;
        this.refs.scanbutton.onEquipmenttypeChanged();
    }
    
    onQuaggaScan(code){
        bs.parse(code);
    }
    
    async handleScan(code){
        if(!this.state.data.draft) return;
        if(code.kind == "EQ" && this.state.data.types[code.type]){
            if(!code.supplier) code.supplier = this.state.supplier;
            var entry = {
                supplier:code.supplier||"own",
                type:parseInt(code.type,10),
                count:code.count||1
            };
            
            if(code.item){
                try{
                    await this.getEntryContents(entry,[code.item])
                    this.insertOrClose(entry,this.scanreceiver);
                }catch(e){
                    return this.playErrorSound();
                }
            }else if(entry.supplier == "own" && this.state.data.types[entry.type].hasItems){
                return this.playErrorSound();
            }else if(!this.scanreceiver){
                this.add(entry);
            }
        }
    }
    
    insertOrClose(entry,receiver){
        var itemId = Object.keys(entry.items)[0];
        var item = entry.items[itemId];
        while(receiver != null){
            for(var i = 0; i < receiver.contents.length; i++){
                if(receiver.contents[i].type == entry.type){
                    if(receiver.contents[i].items[itemId]) return this.playErrorSound();
                    receiver.contents[i].count ++;
                    receiver.contents[i].items[itemId] = item;
                    //reorder this item to the end
                    receiver.contents.push(receiver.contents.splice(i,1)[0]);
                    this.forceUpdate();
                    return;
                }
            }
            var type = this.state.data.types[receiver.entry.type];
            if(type.contents === null){
                receiver.contents.push(entry);
                this.forceUpdate();
                return;
            }            
            receiver = receiver.parent;
        }
        if(this.state.entry) this.finishEntry();
        this.state.entry = entry;
        if(!entry.items[itemId].length && this.state.data.types[entry.type].contents !== null){
            this.finishEntry();
        }else{
            this.forceUpdate();
        }
    }
    
    finishEntry(){
        var entry = this.state.entry;
        delete this.state.entry;
        this.add(entry);
    }
    
    cancelEntry(){
        delete this.state.entry;
        this.forceUpdate();
    }
    
    async getEntryContents(entry,item){
        var data = await client.getEquipment(entry.type,item);        
        var item = data.item;
        var type = this.state.data.types[entry.type];

        var entries = [];
        if(type.contents instanceof Array){
            for(var i = 0; i < type.contents.length; i++){
                var t = type.contents[i];
                var subentry = {
                    supplier:entry.supplier,
                    type:t,
                    count:item.contents[t]?item.contents[t].count:0
                };
                if(this.state.data.types[t].hasItems){
                    subentry.items = {};
                    subentry.count = 0;
                }
                entries.push(subentry);
            }
        }
        if(!entry.items) entry.items = {};
        entry.items[item.id] = entries;     
    }
    
    calculateEntryTotal(entry,total){
        total = total||{};
        if(!total[entry.type]) total[entry.type] = {count:0};
        total[entry.type].count += entry.count;
        for(var item in entry.items){
            item = parseInt(item,10)
            if(!total[entry.type].ids) total[entry.type].ids = [];
            if(total[entry.type].ids.indexOf(item) < 0) total[entry.type].ids.push(item);
            for(var i = 0; i < entry.items[item].length; i++){
                if(!entry.items[item][i].count){
                    entry.items[item].splice(i--,1);
                    continue;
                };
                this.calculateEntryTotal(entry.items[item][i],total);
            }
        }
        return total;
    }
    
    checkAvailability(supplier,total){
        for(var type in total){
            if(
                !this.state.data.types[type].suppliers ||
                !this.state.data.types[type].suppliers[supplier] ||
                ((this.state.data.types[type].suppliers[supplier].available||0) - (this.state.data.types[type].suppliers[supplier].count||0)) < total[type].count
            ){
                return false;
            }
            if(total[type].ids){
                for(var i = 0; i < total[type].ids.length; i++){
                    if(
                        this.state.data.types[type].suppliers[supplier].ids &&
                        this.state.data.types[type].suppliers[supplier].ids.indexOf(total[type].ids[i]) >= 0
                    ){
                        return false;
                    }
                }
            }
        }
        return true;
    }
        
    add(entry){
        var total = this.calculateEntryTotal(entry);
        if(this.checkAvailability(entry.supplier,total)){
            for(var type in total){
                if(!this.state.data.types[type].count) this.state.data.types[type].count = 0;
                this.state.data.types[type].count += total[type].count;
                if(!this.state.data.types[type].suppliers[entry.supplier]) this.state.data.types[type].suppliers[entry.supplier] = {count:0,available:0}
                if(!this.state.data.types[type].suppliers[entry.supplier].count) this.state.data.types[type].suppliers[entry.supplier].count = 0;
                this.state.data.types[type].suppliers[entry.supplier].count += total[type].count;
                if(total[type].ids) {
                    if(!this.state.data.types[type].suppliers[entry.supplier].ids) this.state.data.types[type].suppliers[entry.supplier].ids = [];
                    Array.prototype.splice.apply(this.state.data.types[type].suppliers[entry.supplier].ids,[0,0].concat(total[type].ids));
                }
            }
            this.state.data.history.push(entry);
            this.applyContents(entry);
        }else{
            this.playErrorSound();
        }
        this.forceUpdate();
        this.save();
    }
    
    remove(index){
        var entry = this.state.data.history.splice(this.state.data.history.length-1-index,1)[0];
        var total = this.calculateEntryTotal(entry);
        for(var type in total){
            if(total[type].ids) {
                for(var i = 0; i < total[type].ids.length; i++){
                    this.state.data.types[type].suppliers[entry.supplier].ids.splice(this.state.data.types[type].suppliers[entry.supplier].ids.indexOf(total[type].ids[i]),1);
                }
                if(!this.state.data.types[type].suppliers[entry.supplier].ids.length) delete this.state.data.types[type].suppliers[entry.supplier].ids;
            }
            this.state.data.types[type].suppliers[entry.supplier].count -= total[type].count;
            if(!this.state.data.types[type].suppliers[entry.supplier].count){
                delete this.state.data.types[type].suppliers[entry.supplier].count;
                if(!this.state.data.types[type].suppliers[entry.supplier].available && !this.state.data.types[type].suppliers[entry.supplier].needed) delete this.state.data.types[type].suppliers[entry.supplier];
            }
        
            this.state.data.types[type].count -= total[type].count;
            if(!this.state.data.types[type].count) delete this.state.data.types[type].count
        }
        this.forceUpdate();
        this.save();
    }
    
    async applyContents(entry){
        for(var item in entry.items){
            item = parseInt(item,10);
            var contents = {};
            for(var i = 0; i <  entry.items[item].length; i++){
                var subitem = entry.items[item][i];
                contents[subitem.type] = {count:subitem.count}
                if(subitem.items){
                    contents[subitem.type].ids = Object.keys(subitem.items);
                    this.applyContents(subitem);
                }
            }
            await client.saveEquipment(entry.type,item,{contents:contents})
        }
    }
    
    playErrorSound(){
        new Audio("/public/audio/error.wav").play();
    }
    
    cancel(){
        history.back();
    }

    async save(){
        var data = {};
        for(var type in this.state.data.types){
            var t = this.state.data.types[type];
            if(!t.count) continue;
            data[type] = {
                count:t.count,
                suppliers:{}
            };
            for(var supplier in t.suppliers){
                if(!t.suppliers[supplier].count) continue;
                data[type].suppliers[supplier] = {
                    count:t.suppliers[supplier].count,
                    ids:t.suppliers[supplier].ids
                };
            }
        }
        await client.updateEquipmentIo(this.props.checkin,{person:this.state.data.person,items:data,history:this.state.data.history});
    }
    
    async finish(){
        await client.finishEquipmentIo(this.props.checkin);
        history.back();
    }
