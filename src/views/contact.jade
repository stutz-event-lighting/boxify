.container
    if this.state.item
        h2 Kontakt bearbeiten
            .btn-toolbar.pull-right
                if !this.hideBackButton
                    button.btn.btn-default(onClick=this.cancel.bind(this))
                        i.glyphicon.glyphicon-chevron-left
                        |  Zur√ºck
                button.btn.btn-primary(onClick=this.save.bind(this))
                    i.glyphicon.glyphicon-ok
                    |  Speichern
        .row
            .col-lg-3.col-md-4.col-sm-6.col-xs-12
                div.text-center
                    ImageViewer(image=this.getImagePath() onChange=this.onImageChanged.bind(this) editable)
            .col-lg-9.col-md-8.col-sm-6.col-xs-12
                h3 Kontakt Daten
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Typ
                        .col-lg-10
                            select.form-control(value=this.state.item.type onChange=this.setValue.bind(this,"type"))
                                option(value="person") Person
                                option(value="company") Firma
                                option(value="club") Verein
                    if this.state.item.type == "person"
                        .form-group
                            label.col-lg-2.control-label Anrede
                            .col-lg-10
                                input.form-control(placeholder="Anrede" value=this.state.item.salutation onChange=this.setValue.bind(this,"salutation"))
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10(style="display:flex")
                                input.form-control(type="text" placeholder="Vorname" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.state.item.firstname onChange=this.setValue.bind(this,"firstname"))
                                input.form-control(type="text" placeholder="Nachname" style="flex:1;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.state.item.lastname onChange=this.setValue.bind(this,"lastname"))
                    else
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Name" value=this.state.item.firstname onChange=this.setValue.bind(this,"firstname"))
                    .form-group
                        label.col-lg-2.control-label Adresse
                        .col-lg-10
                            div(style="marginBottom:15px;display:flex")
                                input.form-control(placeholder="Strasse" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.state.item.streetName onChange=this.setValue.bind(this,"streetName"))
                                input.form-control(placeholder="Hausnummer" style="width:25%;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.state.item.streetNr onChange=this.setValue.bind(this,"streetNr"))
                            div(style="marginBottom:15px;display:flex")
                                input.form-control(placeholder="PLZ" style="width:25%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;" value=this.state.item.zip onChange=this.setValue.bind(this,"zip"))
                                input.form-control(placeholder="Ort" style="flex:1;borderTopLeftRadius:0px;borderBottomLeftRadius:0px" value=this.state.item.city onChange=this.setValue.bind(this,"city"))
                    .form-group
                        label.col-lg-2.control-label E-Mail
                        .col-lg-10
                            each email in this.state.item.emails
                                div(style="marginBottom:15px;display:flex")
                                    input.form-control(placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px" value=email.type onChange=this.setValue.bind(this,"type",email))
                                    input.form-control(placeholder="E-Mail" style="flex:1;borderRight:0px;borderRadius:0px" value=email.email onChange=this.setValue.bind(this,"email",email))
                                    .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(email.standard?"color:orange":"") onClick=this.setEmailAsStandard.bind(this,email))
                                        i.glyphicon.glyphicon-star
                                    .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removeEmail.bind(this,email))
                                        i.glyphicon.glyphicon-trash
                            div(style="marginBottom:15px")
                                .btn.btn-default.pull-right(onClick=this.addEmail.bind(this))
                                    i.glyphicon.glyphicon-plus
                    .form-group
                        label.col-lg-2.control-label Telefon
                        .col-lg-10
                            each phone in this.state.item.phones
                                div(style="marginBottom:15px;display:flex")
                                    input.form-control(placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px" value=phone.type onChange=this.setValue.bind(this,"type",phone))
                                    input.form-control(placeholder="Nummer" style="flex:1;borderRight:0px;borderRadius:0px" value=phone.number onChange=this.setValue.bind(this,"number",phone))
                                    .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(phone.standard?"color:orange":"") onClick=this.setPhoneAsStandard.bind(this,phone))
                                        i.glyphicon.glyphicon-star
                                    .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removePhone.bind(this,phone))
                                        i.glyphicon.glyphicon-trash
                            div(style="marginBottom:15px")
                                .btn.btn-default.pull-right(onClick=this.addPhone.bind(this))
                                    i.glyphicon.glyphicon-plus
                    if this.state.item.type == "company" || this.state.item.type == "club"
                        .form-group
                            label.col-lg-2.control-label Kontakte
                            .col-lg-10
                                each contact in this.state.item.contacts
                                    .input-group(style="marginBottom:15px")
                                        span.input-group-addon
                                            a(href="/contacts/"+contact.id)=contact.name
                                        input.form-control(placeholder="Funktion" value=contact.type onChange=this.setValue.bind(this,"type",contact))
                                        span.input-group-btn
                                            .btn.btn-default(onClick=this.removeContact.bind(this,contact))
                                                i.glyphicon.glyphicon-trash
                                CreateContactButton(callback=this.addContact.bind(this))
                    .form-group
                        label.col-lg-2.control-label Kommentar
                        .col-lg-10
                            TextArea.form-control(placeholder="Kommentar" value=this.state.item.remark onChange=this.setValue.bind(this,"remark"))

                block properties
        block container
script.
    var client = require("../client");
    var TextArea = require("react-textarea-autosize").default;
    var CreateContactButton = require("./CreateContactButton");
    var ImageViewer = require("./ImageViewer");
script(section="body").    
    constructor(props,context){
        super(props,context);
        this.state = {};
        this.componentWillReceiveProps(props);
        
    }
    componentWillReceiveProps(props){
        this.props = props;
        this.loadContact();
    }
    
    getContactId(){
        return this.props.contact;
    }
    
    async loadContact(){
        this.state.item = await client.getContact(this.getContactId());
        this.forceUpdate();
    }
    
    setValue(name,target,e){
        (target||this.state.item)[name] = e.target.value;
        this.forceUpdate();
    }
    
    getImagePath(){
        return this.state.item.image?this.state.item.image.url:"/api/contacts/"+this.state.item._id+"/image";
    }
    
    onImageChanged(image){
        this.state.item.image = image;
        this.forceUpdate();
    }
    
    addEmail(){
        var entry = {type:"",email:""};
        if(!this.state.item.emails.length) entry.standard = true;
        this.state.item.emails.push(entry);
        this.forceUpdate();
    }
    
    removeEmail(email){
        this.state.item.emails.splice(this.state.item.emails.indexOf(email),1);
        if(email.standard && this.state.item.emails.length) this.state.item.emails[0].standard = true;
        this.forceUpdate();
    }
    
    setEmailAsStandard(email){
        var emails = this.state.item.emails;
        for(var i = 0; i < emails.length; i++) delete emails[i].standard;
        email.standard = true;
        this.forceUpdate();
    }
    
    addPhone(){
        var entry = {type:"",number:""};
        if(!this.state.item.phones.length) entry.standard = true;
        this.state.item.phones.push(entry);
        this.forceUpdate();
    }
    
    removePhone(phone){      
        this.state.item.phones.splice(this.state.item.phones.indexOf(phone),1);
        if(phone.standard && this.state.item.phones.length) this.state.item.phones[0].standard = true;
        this.forceUpdate();
    }
    
    setPhoneAsStandard(phone){
        var phones = this.state.item.phones;
        for(var i = 0; i < phones.length; i++) delete phones[i].standard;
        phone.standard = true;
        this.forceUpdate();
    }
    
    addContact(id,name){
        if(!this.state.item.contacts) this.state.item.contacts = [];
        this.state.item.contacts.push({
            id:id,
            name:name,
            type:""
        });
        this.forceUpdate();
    }
    
    removeContact(contact){        
        this.state.item.contacts.splice(this.state.item.contacts.indexOf(contact),1);
        this.forceUpdate();
    }
    
    cancel(){
        history.back();
    }
    
    async save(){
        var data = {
            type:this.state.item.type,
            salutation:this.state.item.salutation,
            firstname:this.state.item.firstname,
            lastname:this.state.item.lastname,
            streetName:this.state.item.streetName,
            streetNr:this.state.item.streetNr,
            zip:this.state.item.zip,
            city:this.state.item.city,
            emails:this.state.item.emails,
            phones:this.state.item.phones,
            contacts:this.state.item.contacts,
            remark:this.state.item.remark,
        };
        await client.updateContact(this.getContactId(),data);
        if(this.state.item.image){
            await client.updateContactImage(this.getContactId(),{image:this.state.item.image.url});
            delete this.state.item.image;
            this.forceUpdate();
        }
        this.onSaved();
    }
    
    onSaved(){
        history.back();
    }
    
    
