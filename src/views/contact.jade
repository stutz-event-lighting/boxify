div
    if this.contact
        .row
            .col-lg-3.col-md-4.col-sm-6.col-xs-12
                div.text-center
                    ImageViewer(image=this.getImagePath() onChange=this.onImageChanged.bind(this) editable)
            .col-lg-9.col-md-8.col-sm-6.col-xs-12
                h3 Kontakt Daten
                Context(target=this.contact)
                    .form-horizontal
                        Binding(name="type" onChange=this.forceUpdate.bind(this,undefined))
                            FormGroup(label="Typ" labelClass="col-lg-2" wrapperClass="col-lg-10")
                                Input(type="select")
                                    option(value="person") Person
                                    option(value="company") Firma
                                    option(value="club") Verein
                        if this.contact.type == "person"
                            Binding(name="salutation")
                                FormGroup(label="Anrede" labelClass="col-lg-2" wrapperClass="col-lg-10")
                                    Input(type="text")
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10(style="display:flex")
                                if this.contact.type == "person"
                                    Binding(name="firstname")
                                        Input(type="text" placeholder="Vorname" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;")
                                    Binding(name="lastname")
                                        Input(type="text" placeholder="Nachname" style="flex:1;borderTopLeftRadius:0px;borderBottomLeftRadius:0px")
                                else
                                    Binding(name="firstname")
                                        Input(type="text")
                        .form-group
                            label.col-lg-2.control-label Adresse
                            .col-lg-10
                                div(style="marginBottom:15px;display:flex")
                                    Binding(name="streetName")
                                        Input(type="text" placeholder="Strasse" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;")
                                    Binding(name="streetNr")
                                        Input(type="text" placeholder="Hausnummer" style="width:25%;borderTopLeftRadius:0px;borderBottomLeftRadius:0px")
                                div(style="marginBottom:15px;display:flex")
                                    Binding(name="zip")
                                        Input(type="text" placeholder="PLZ" style="flex:1;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px;")
                                    Binding(name="city")
                                        Input(type="text" placeholder="Ort" style="width:75%;borderTopLeftRadius:0px;borderBottomLeftRadius:0px")
                        .form-group
                            label.col-lg-2.control-label E-Mail
                            Context(name="emails")
                                .col-lg-10
                                    each email,i in this.contact.emails
                                        Context(name=i)
                                            div(style="marginBottom:15px;display:flex")
                                                Binding(name="type")
                                                    Input(type="text" placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px")
                                                Binding(name="email")
                                                    Input(type="email" placeholder="E-Mail" style="flex:1;borderRight:0px;borderRadius:0px")
                                                .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(email.standard?"color:orange":"") onClick=this.setEmailAsStandard.bind(this,email))
                                                    .glyphicon.glyphicon-star
                                                .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removeEmail.bind(this,email))
                                                    .glyphicon.glyphicon-trash
                                    div(style="marginBottom:15px")
                                        .btn.btn-default.pull-right(onClick=this.addEmail.bind(this))
                                            i.glyphicon.glyphicon-plus
                        .form-group
                            label.col-lg-2.control-label Telefon
                            Context(name="phones")
                                .col-lg-10
                                    each phone,i in this.contact.phones
                                        Context(name=i)
                                            div(style="marginBottom:15px;display:flex")
                                                Binding(name="type")
                                                    Input(type="text" placeholder="Typ" style="width:30%;borderRight:0px;borderTopRightRadius:0px;borderBottomRightRadius:0px")
                                                Binding(name="number")
                                                    Input(type="text" placeholder="Nummer" style="flex:1;borderRight:0px;borderRadius:0px")
                                                .btn.btn-default(style="borderRight:0px;borderRadius:0px;"+(phone.standard?"color:orange":"") onClick=this.setPhoneAsStandard.bind(this,phone))
                                                    i.glyphicon.glyphicon-star
                                                .btn.btn-default(style="borderTopLeftRadius:0px;borderBottomLeftRadius:0px" onClick=this.removePhone.bind(this,phone))
                                                    i.glyphicon.glyphicon-trash
                                    div(style="marginBottom:15px")
                                        .btn.btn-default.pull-right(onClick=this.addPhone.bind(this))
                                            i.glyphicon.glyphicon-plus
                        if this.contact.type == "company" || this.contact.type == "club"                            
                            .form-group
                                label.col-lg-2.control-label Kontakte
                                Context(name="contacts")
                                    .col-lg-10
                                        each contact,i in this.contact.contacts
                                            Context(name=i)
                                                .input-group(style="marginBottom:15px")
                                                    span.input-group-addon
                                                        a(onClick=this.props.onContactSelected.bind(this,contact.id))=contact.name                                                    
                                                    Binding(name="type")
                                                        Input(type="text" placeholder="Funktion" style="flex:1")
                                                    span.input-group-btn
                                                        .btn.btn-default(onClick=this.removeContact.bind(this,contact))
                                                            i.glyphicon.glyphicon-trash
                                        CreateContactButton(callback=this.addContact.bind(this))
                        Binding(name="remark")
                            FormGroup(label="Kommentar" labelClass="col-lg-2" wrapperClass="col-lg-10")
                                Input(type="textarea")
        .btn-toolbar.pull-right
            button.btn.btn-primary(onClick=this.save.bind(this))
                i.glyphicon.glyphicon-ok
                |  Speichern
script.
    var client = require("../client");
    var CreateContactButton = require("./CreateContactButton");
    var ImageViewer = require("./ImageViewer");
    var {Context,Binding} = require("react-bicon");
    var FormGroup = require("./formgroup");
    var Input = require("./input");
    var ContactBox = require("./ContactBox");
    var CreateContactButton = require("./CreateContactButton");
script(section="body").    
    constructor(props,context){
        super(props,context);
        this.componentWillReceiveProps(props);        
    }
    async componentWillReceiveProps(props){
        this.contact = await client.getContact(props.contact);
        this.forceUpdate();
    }
    
    getImagePath(){
        return this.image?this.image.url:"/api/contacts/"+this.contact._id+"/image";
    }
    
    onImageChanged(image){
        this.image = image;
        this.forceUpdate();
    }
    
    addEmail(){
        var entry = {type:"",email:""};
        if(!this.contact.emails.length) entry.standard = true;
        this.contact.emails.push(entry);
        this.forceUpdate();
    }
    
    removeEmail(email){
        this.contact.emails.splice(this.contact.emails.indexOf(email),1);
        if(email.standard && this.contact.emails.length) this.contact.emails[0].standard = true;
        this.forceUpdate();
    }
    
    setEmailAsStandard(email){
        var emails = this.contact.emails;
        for(var i = 0; i < emails.length; i++) delete emails[i].standard;
        email.standard = true;
        this.forceUpdate();
    }
    
    addPhone(){
        var entry = {type:"",number:""};
        if(!this.contact.phones.length) entry.standard = true;
        this.contact.phones.push(entry);
        this.forceUpdate();
    }
    
    removePhone(phone){      
        this.contact.phones.splice(this.contact.phones.indexOf(phone),1);
        if(phone.standard && this.contact.phones.length) this.contact.phones[0].standard = true;
        this.forceUpdate();
    }
    
    setPhoneAsStandard(phone){
        var phones = this.contact.phones;
        for(var i = 0; i < phones.length; i++) delete phones[i].standard;
        phone.standard = true;
        this.forceUpdate();
    }
    
    async addContact(id){
        if(!this.contact.contacts) this.contact.contacts = [];
        var c = await client.getContact(id);
        this.contact.contacts.push({
            id:id,
            name: [c.firstname,c.lastname].filter(n=>n).join(" "),
            type:""
        });
        this.forceUpdate();
    }
    
    removeContact(contact){        
        this.contact.contacts.splice(this.contact.contacts.indexOf(contact),1);
        this.forceUpdate();
    }
    
    async save(){
        await client.updateContact(this.props.contact,this.contact);
        if(this.image){
            await client.updateContactImage(this.props.contact,{image:this.image.url});
            delete this.image;
            this.forceUpdate();
        }
    }    
