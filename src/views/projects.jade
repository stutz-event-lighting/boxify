.container
    h1 Projekte
    .searchbar(style="display:flex")
        .input-group(style="flex:1;display:flex;width:auto;")
            input.form-control(type="text" style="display:block;width:auto;flex:1" onChange=this.search.bind(this) value=this.state.search||"")
            span.input-group-btn(style="display:inline-block;width:auto;")
                button.btn.btn-default Suchen
        .btn-group(style="marginLeft:10px")
            button.btn.btn-primary(onClick=this.create.bind(this)) Erfassen
    label
        input(type="checkbox" checked=this.state.finished onChange=this.changeFinishedFilter.bind(this))
        |  Abgeschlossene Projekte anzeigen
    table.table.table-striped.table-hover
        thead
            tr
                th Name
                th Kunde
                th Beginn
                th Ende
        tbody
            - var over;
            each item in this.state.items
                - var isOver = item.start < new Date()
                if over!==undefined && over != isOver
                    tr
                        td(style="backgroundColor:white;height:70px" colSpan=4)
                - over = isOver
                tr(onClick=this.edit.bind(this,item))
                    td= item.name
                    td= item.customer.firstname+(item.customer.lastname?(" "+item.customer.lastname):"")
                    td= moment(item.start).format("LLL")
                    td
                        = moment(item.end).format("LLL")
                        button.btn.btn-xs.btn-default.pull-right(onClick=this.delete.bind(this,item))
                            i.glyphicon.glyphicon-trash
    if this.state.create
        Modal
            .modal-header
                h2 Projekt erstellen
            .modal-body
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Name
                        .col-lg-10
                            input.form-control(type="text" value=this.state.create.name onChange=this.validateCreateName.bind(this))
                    .form-group
                        label.col-lg-2.control-label Kunde
                        .col-lg-10
                            ContactBox(value=this.state.create.customer onChange=this.onCustomerChanged.bind(this) role="customer")
                    .form-group
                        label.col-lg-2.control-label Beginn
                        .col-lg-10
                            DatePicker(value=this.state.create.start?new Date(this.state.create.start):undefined format="dd.MM.yyyy HH:mm" onChange=this.onStartChanged.bind(this))
                    .form-group
                        label.col-lg-2.control-label Ende
                        .col-lg-10
                            DatePicker(value=this.state.create.end?new Date(this.state.create.end):undefined format="dd.MM.yyyy HH:mm" onChange=this.onEndChanged.bind(this))
            .modal-footer
                button.btn.btn-default(onClick=this.cancelCreate.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.confirmCreate.bind(this)) Erfassen
    if this.state.delete
        ConfirmDialog(title="Projekt löschen" action="Löschen" question=("\""+this.state.delete.name+"\" löschen möchten") onConfirm=this.confirmDelete.bind(this) onCancel=this.cancelDelete.bind(this))
script.
    var client = require("../client");
    var DatePicker = require("react-widgets").DateTimePicker;
    var moment = require("moment");
    var ConfirmDialog = require("./ConfirmDialog");
    var Modal = require("./Modal");
    var ContactBox = require("./ContactBox");
script(section="body").    
    getNeededPermissions(){
        return ["projects_read"];
    }
    
    constructor(props,context){
        super(props,context);
        this.state = {};
        this.loadResults();
    }
    
    async loadResults(){
        var items = await client.findProjects({search:this.state.search||"",finished:this.state.finished||false});
        this.state.items = items;
        this.forceUpdate();
    }

    search(e){
        this.state.search = e.target.value;
        this.loadResults();
    }
    
    changeFinishedFilter(e){
        if(e.target.checked){
            this.state.finished = true;
        }else{
            delete this.state.finished;
        }
        this.loadResults();
    }

    create(){
        this.state.create = {name:"",start:moment({hour:8}).toDate().getTime(),end:moment({hour:20}).add(1,"days").toDate().getTime()};
        this.forceUpdate();
    }
    validateCreateName(e){
        this.state.create.name = e.target.value;
        this.forceUpdate();
    }
    
    onCustomerChanged(id){
        this.state.create.customer = id;
        this.forceUpdate();
    }
    
    onStartChanged(time){
        this.state.create.start = time.getTime();
        this.forceUpdate();
    }
    
    onEndChanged(time){
        this.state.create.end = time.getTime();
        this.forceUpdate();
    }
    
    cancelCreate(){
        delete this.state.create;
        this.forceUpdate();
    }
    async confirmCreate(){
        var create = this.state.create;
        if(!create.customer) return;       
        
        var id = await client.createProject(this.state.create);
        delete this.state.create;
        this.forceUpdate();
        this.props.onSelect(id)
    }

    edit(item,e){
        if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
        this.props.onSelect(item._id);
    }

    delete(item){
        this.state.delete = item;
        this.forceUpdate();
    }

    cancelDelete(){
        delete this.state.delete;
        this.forceUpdate();
    }
    
    async confirmDelete(){
        var del = this.state.delete;
        delete this.state.delete;
        await client.deleteProject(del._id);
        this.loadResults();
    }
