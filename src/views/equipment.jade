.container
    h1 Equipment
    .searchbar(style="display:flex")
        .input-group(style="flex:1;display:flex;width:auto;")
            input.form-control(type="text" style="display:block;width:auto;flex:1" onChange=this.search.bind(this) value=this.state.search||"")
            span.input-group-btn(style="display:inline-block;width:auto;")
                button.btn.btn-default Suchen
        .btn-group(style="marginLeft:10px")
            button.btn.btn-primary(onClick=this.create.bind(this)) Erfassen
    table.table.table-striped.table-hover
        thead
            tr
                th ID
                th Name
                th Hersteller
                th.hidden-xs Kategorie
                th.hidden-xs Anzahl
                th.hidden-xs Grösse
                th.hidden-xs Gewicht
                th
        tbody
            if this.state.categories && this.state.items
                each item in this.state.items
                    tr(onClick=this.edit.bind(this,item))
                        td= item._id
                        td= item.name
                        td= item.manufacturer
                        td.hidden-xs= item.category?this.state.categoriesbyid[item.category]:"Keine"
                        td.hidden-xs= item.count
                        td.hidden-xs= item.length&&item.width&&item.height?(item.length+"x"+item.width+"x"+item.height):""
                        td.hidden-xs= item.weight
                        td
                            //button.btn.btn-xs.btn-default.pull-right(onClick=this.delete.bind(this,item))
                                i.glyphicon.glyphicon-trash
    if this.state.create
        Modal
            .modal-header
                h2 Equipmenttyp anlegen
            .modal-body
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Name
                        .col-lg-10
                            input.form-control(type="text" value=this.state.create.name onChange=this.validateCreateName.bind(this))
            .modal-footer
                button.btn.btn-default(onClick=this.cancelCreate.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.confirmCreate.bind(this)) Erstellen
    if this.state.delete
        Modal
            .modal-header
                h2 Equipmenttyp löschen
            .modal-body= "Sind sie sicher, dass sie \""+this.state.delete.name+"\" löschen möchten?"
            .modal-footer
                button.btn.btn-default(onClick=this.cancelDelete.bind(this)) Abbrechen
                button.btn.btn-primary(onClick=this.confirmDelete.bind(this)) Löschen
script.
    var client = require("../client");
    var Modal = require("./Modal");
script(section="body").
    constructor(props,context){
        super(props,context);
        this.state = {};
        this.loadCategories();
        this.searchTypes();
    }
    
    async searchTypes(){
        this.state.items = await client.findEquipmentTypes({search:this.state.search});
        this.forceUpdate();
    }
    
    async loadCategories(){
        this.state.categories = await client.getEquipmentCategories();
        this.state.categoriesbyid = {};
        for(var category of this.state.categories){
            this.state.categoriesbyid[category._id] = category.name;                        
        }
        this.forceUpdate();
    }
    
    getNeededPermissions(){
        return ["equipment_read"];
    }
    
    search(e){
        this.state.search = e.target.value;
        delete this.state.items;
        this.searchTypes();
    }

    create(){
        this.state.create = {_id:"",name:""};
        this.forceUpdate();
        setTimeout(function(){
            this.refs.createid.focus();
        }.bind(this),1);
    }
    validateCreateName(e){
        this.state.create.name = e.target.value;
        this.forceUpdate();
    }
    cancelCreate(){
        delete this.state.create;
        this.forceUpdate();
    }
    async confirmCreate(){
        var id = await client.createEquipmentType(this.state.create);
        delete this.state.create;
        this.forceUpdate();
        this.props.onSelect(id);
    }

    edit(item,e){
        if(e.target.tagName == "I" || e.target.tagName == "BUTTON") return;
        this.props.onSelect(item._id)
    }
    
    delete(item){
        this.state.delete = item;
        this.forceUpdate();
    }
    
    cancelDelete(){
        delete this.state.delete;
        this.forceUpdate();
    }
    async confirmDelete(){
        var del = this.state.delete;
        delete this.state.delete;
        await client.deleteEquipmentType(del._id);
        delete this.state.items;
        this.forceUpdate();
    }
