.container
    if this.reservation
        h2 Reservation
            .btn-toolbar.pull-right
                button.btn.btn-default(onClick=this.cancel.bind(this))
                    i.glyphicon.glyphicon-chevron-left
                    |  Zurück
                button.btn.btn-primary(onClick=this.save.bind(this))
                    i.glyphicon.glyphicon-ok
                    |  Speichern
        .row
            .col-xs-12
                .pull-left
                    h3 Equipment
                .btn-toolbar.pull-right(style="marginTop:18px")
                    .btn.btn-primary.pull-right(onClick=this.add.bind(this)) Hinzufügen
                    ScanButton.pull-left(onScan=this.handleScan.bind(this) ref="scanbutton" supplier="none")
                each category in this.categories
                    - var types = category.types.filter(t=>this.reservation.items[t._id] !== undefined)
                    if types.length
                        h4= category.name
                        table.table.table-striped.table-hover
                            thead
                                tr
                                    th ID
                                    th Name
                                    th Anzahl
                                    th
                            tbody
                                each type in types
                                    tr
                                        td= type._id
                                        td= (type.manufacturer?type.manufacturer+" ":"")+type.name
                                        td(style="paddingTop:2px;paddingBottom:2px")
                                            input.form-control.input-sm(value=this.reservation.items[type._id]+"" style="max-width:100px" onChange=this.changeItem(type._id) onFocus=this.selectCount.bind(this))
                                        td
                                            .btn.btn-default.btn-xs.pull-right(onClick=this.removeItem.bind(this,type._id))
                                                i.glyphicon.glyphicon-trash
    if this.state.add
        .modal-backdrop(style="bottom:0px;display:block").fade.in
        .modal(style="display:block").fade.in
            .modal-dialog
                .modal-content(style="top:100px;bottom:100px;")
                    .modal-header
                        h2 Equipment hinzufügen
                    .modal-body(style="height:400px;overflowY:auto")
                        each category in this.categories
                            h4= category.name
                            table.table.table-striped
                                tbody
                                    each type in category.types
                                        if this.reservation.items[type._id] === undefined
                                            tr
                                                td(onClick=this.addItem.bind(this,type._id,0))= (type.manufacturer?type.manufacturer+" ":"")+type.name
                    .modal-footer
                        button.btn.btn-primary(onClick=this.done.bind(this)) Fertig
script.
    var client = require("../client");
    var ScanButton = require("./ScanButton");
    var util = require("../util");
script(section="body").    
    getNeededPermissions(){
        return ["projects_read"];
    }
    
    constructor(props,context){
        super(props,context);
        this.state = {};
        this.componentWillReceiveProps(props);
    }
    componentWillReceiveProps(props){
        this.props = props;
        this.loadData();
    }
    async loadData(){
        [this.reservation,this.types,this.categories] = await Promise.all([
            client.getReservation(this.props.project,this.props.reservation),
            client.findEquipmentTypes({}),
            client.getEquipmentCategories()
        ]);
        this.categories = util.createIndex(this.categories,"_id");
        this.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
        for(var type of this.types){
            var category = this.categories[type.category];
            if(!category.types) category.types = [];
            category.types.push(type);
        }
        this.forceUpdate();
    }
    
    add(){
        this.state.add = true;
        this.forceUpdate();
    }
    
    done(){
        delete this.state.add;
        this.forceUpdate();
    }
    
    addItem(type,count){
        this.reservation.items[type] = count||0;
        this.forceUpdate();
    }
    
    handleScan(code){
        this.addItem(code.type,code.count);        
    }
    
    changeItem(type){
        return function(e){
            if(/^[0-9]+$/.test(e.target.value)) this.reservation.items[type] = parseInt(e.target.value,10);
            if(e.target.value.length == 0) this.reservation.items[type] = 0;            
            this.forceUpdate();
        }.bind(this);
    }
    
    selectCount(e){
        setTimeout(e.target.select.bind(e.target))
    }
    
    removeItem(type){
        delete this.reservation.items[type];
        this.forceUpdate();
    }

    cancel(){
        history.back();
    }

    async save(){
        await client.updateReservation(this.props.project,this.props.reservation,this.reservation.items);
        history.back();
    }
