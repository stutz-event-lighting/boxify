extends ./base

append body
    - this.checkData();
    if this.state.data
        .container
            h2 Zumiete
                .btn-toolbar.pull-right
                    button.btn.btn-default(onClick=this.cancel.bind(this))
                        i.glyphicon.glyphicon-chevron-left
                        |  Zurück
                    button.btn.btn-primary(onClick=this.save.bind(this))
                        i.glyphicon.glyphicon-ok
                        = " "+(this.props.params.rental.indexOf("new") == 0?"Erstellen":"Speichern")
            .row
                .col-xs-12
                    h3 Daten
                    .form-horizontal
                        .form-group
                            label.col-lg-2.control-label Name
                            .col-lg-10
                                input.form-control(placeholder="Name" value=this.state.data.rental.name onChange=this.onNameChange.bind(this))
                        .form-group
                            label.col-lg-2.control-label Lieferant
                            .col-lg-10
                                ContactBox(value=this.state.data.rental.supplier role="supplier" onChange=this.onSupplierChange.bind(this) disabled=this.props.params.rental.indexOf("new")!=0)
                        .form-group
                            label.col-lg-2.control-label Erhalt
                            .col-lg-10
                                DatePicker(disabled=(this.state.data.rental.status=="received") format="dd.MM.yyyy HH:mm" value=this.state.data.rental.delivery?new Date(this.state.data.rental.delivery):undefined onChange=this.onDeliveryChanged.bind(this))
                        .form-group
                            label.col-lg-2.control-label Rückgabe
                            .col-lg-10
                                DatePicker(value=this.state.data.rental.return?new Date(this.state.data.rental.return):undefined format="dd.MM.yyyy HH:mm" onChange=this.onReturnChanged.bind(this))
            .row
                .col-xs-12                    
                    h3
                        | Equipment
                        .pull-right
                            if this.props.params.rental.indexOf("new") == 0
                                .btn.btn-primary(onClick=this.add.bind(this)) Hinzufügen
                            else if this.state.data.rental.status == "requested"
                                .btn.btn-primary(onClick=this.book.bind(this)) Buchen
                            else if this.state.data.rental.status == "booked"
                                .btn.btn-primary(onClick=this.receive.bind(this)) Ware erhalten
                            else
                                .btn.btn-primary(onClick=this.doreturn.bind(this)) Ware zurückgeben
                    each category in this.state.data.categories
                        - var types = Object.keys(this.state.data.types).map(id=>this.state.data.types[id]).filter(type=> (this.state.data.types[type._id].count !== undefined || this.state.data.types[type._id].available < 0) &&type.category == category._id);
                        if types.length
                            h4= category.name
                            table.table.table-striped.table-hover
                                thead
                                    tr
                                        th ID
                                        th Name
                                        th Anzahl
                                        th
                                tbody
                                    each type in types
                                        tr
                                            td= type._id
                                            td= this.state.data.types[type._id].name
                                            td(style="paddingTop:2px;paddingBottom:2px")
                                                if this.props.params.rental.indexOf("new") == 0
                                                    input.form-control.input-sm(value=(this.state.data.types[type._id].count||0)+"" style="max-width:100px" onChange=this.changeItem(type._id) onFocus=this.selectCount.bind(this))
                                                else
                                                    = this.state.data.types[type._id].count||0
                                            td
                                                .btn.btn-default.btn-xs.pull-right(onClick=this.removeItem(type._id))
                                                    i.glyphicon.glyphicon-trash
    if this.state.add
        Modal
            .modal-header
                h2 Equipment hinzufügen
            .modal-body(style="maxHeight:500px;overflowY:auto")
                each category in this.state.data.categories
                    h4= category.name
                    table.table.table-striped
                        tbody
                            each type in category.types
                                if this.state.data.types[type].count === undefined
                                    tr
                                        td(onClick=this.addItem(type))= this.state.data.types[type].name
            .modal-footer
                button.btn.btn-primary(onClick=this.done.bind(this)) Fertig
script.
    var client = require("../client");
    var DatePicker = require("react-widgets").DateTimePicker;
    var moment = require("moment");
    var Modal = require("./Modal");
    var ContactBox = require("./ContactBox");
script(section="body").    
    getNeededPermissions(){
        return ["rentals_read"];
    }
    
    checkData(){
        var self = this;
        if(this.state.data === undefined){
            var opts = {};
            if(this.state.project) opts.project = this.state.project;
            client.getRental(this.props.params.rental,opts,function(err,data){
                if(err) return;
                self.state.data = data;
                if(!self.state.data.rental){
                    self.state.data.rental = {
                        name:"",
                        supplier:null,
                        status:self.props.params.rental=="newrequest"?"requested":(self.props.params.rental=="newbooking"?"booked":"received")
                    }                    
                }
                if(!self.state.data.rental.delivery) self.state.data.rental.delivery = moment({hour:20}).toDate().getTime();
                if(!self.state.data.rental.return) self.state.data.rental.return = moment({hour:20}).add(1,"days").toDate().getTime();
                data.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
                for(var type in data.types){
                    var category = data.categories[data.types[type].category];
                    if(!category.types) category.types = [];
                    category.types.push(type);                    
                }
                self.update();
            });
        }
    }
    
    onNameChange(e){
        this.state.data.rental.name = e.target.value;
        this.update();
    }
    
    onSupplierChange(id){
        if(id){
            this.state.data.rental.supplier = id;
        }else{
            delete this.state.data.rental.supplier;
        }
        this.update();
    }
    
    onDeliveryChanged(time){
        if(time) this.state.data.rental.delivery = time.getTime();
        this.update();
    }
    
    onReturnChanged(time){
        if(time) this.state.data.rental.return = time.getTime();
        this.update();
    }
    
    add(){
        this.state.add = true;
        this.update();
    }
    
    done(){
        delete this.state.add;
        this.update();
    }
    
    addItem(type){
        return function(){
            this.state.data.types[type].count = 0;
            this.update();
        }.bind(this);
    }
    
    changeItem(type){
        return function(e){
            if(/^[0-9]+$/.test(e.target.value)) this.state.data.types[type].count = parseInt(e.target.value,10);
            if(e.target.value.length == 0) this.state.data.types[type].count = 0;            
            this.update();
        }.bind(this);
    }
    
    selectCount(e){
        setTimeout(e.target.select.bind(e.target))        
    }
    
    removeItem(type){
        return function(){
            delete this.state.data.types[type].count;
            this.update();
        }.bind(this);
    }
    
    book(){
        client.updateRentalStatus(this.props.params.rental,"booked",function(err){
            back(true);
        })
    }
    receive(){
        client.updateRentalStatus(this.props.params.rental,"received",function(err){
            back(true);
        })
    }
    doreturn(){
        client.updateRentalStatus(this.props.params.rental,"returned",function(err){
            back(true);
        })
    }

    cancel(){
        history.back();
    }

    save(){
        var items = {};
        for(var type in this.state.data.types){
            if(this.state.data.types[type].count) items[type] = {count:this.state.data.types[type].count,ids:this.state.data.types[type].ids};
        }
    
        var rental = {
            name:this.state.data.rental.name,
            supplier:this.state.data.rental.supplier,
            delivery:this.state.data.rental.delivery,
            return:this.state.data.rental.return,
            status:this.state.data.rental.status,
            items:items
        };
               
        client.updateRental(this.props.params.rental,rental,function(err){
            if(err) return true;
            back(true);
        });
    }
