.container
    if this.rental
        h2 Zumiete
            .btn-toolbar.pull-right
                button.btn.btn-default(onClick=this.cancel.bind(this))
                    i.glyphicon.glyphicon-chevron-left
                    |  Zurück
                button.btn.btn-primary(onClick=this.save.bind(this))
                    i.glyphicon.glyphicon-ok
                    = " "+(this.props.rental.indexOf("new") == 0?"Erstellen":"Speichern")
        .row
            .col-xs-12
                h3 Daten
                .form-horizontal
                    .form-group
                        label.col-lg-2.control-label Name
                        .col-lg-10
                            input.form-control(placeholder="Name" value=this.rental.name onChange=this.onNameChange.bind(this))
                    .form-group
                        label.col-lg-2.control-label Lieferant
                        .col-lg-10
                            ContactBox(value=this.rental.supplier role="supplier" onChange=this.onSupplierChange.bind(this) disabled=this.props.rental.indexOf("new")!=0)
                    .form-group
                        label.col-lg-2.control-label Erhalt
                        .col-lg-10
                            DatePicker(disabled=(this.rental.status=="received") format="dd.MM.yyyy HH:mm" value=this.rental.delivery?new Date(this.rental.delivery):undefined onChange=this.onDeliveryChanged.bind(this))
                    .form-group
                        label.col-lg-2.control-label Rückgabe
                        .col-lg-10
                            DatePicker(value=this.rental.return?new Date(this.rental.return):undefined format="dd.MM.yyyy HH:mm" onChange=this.onReturnChanged.bind(this))
        .row
            .col-xs-12                    
                h3
                    | Equipment
                    .pull-right
                        if this.props.rental.indexOf("new") == 0
                            .btn.btn-primary(onClick=this.add.bind(this)) Hinzufügen
                        else if this.rental.status == "requested"
                            .btn.btn-primary(onClick=this.book.bind(this)) Buchen
                        else if this.rental.status == "booked"
                            .btn.btn-primary(onClick=this.receive.bind(this)) Ware erhalten
                        else
                            .btn.btn-primary(onClick=this.doreturn.bind(this)) Ware zurückgeben
                each category in this.categories
                    - var types = category.types.filter(type=> (this.rental.items[type._id]&&type.category == category._id));
                    if types.length
                        h4= category.name
                        table.table.table-striped.table-hover
                            thead
                                tr
                                    th ID
                                    th Name
                                    th Anzahl
                                    th
                            tbody
                                each type in types
                                    tr
                                        td= type._id
                                        td= (type.manufacturer?type.manufacturer+" ":"")+type.name
                                        td(style="paddingTop:2px;paddingBottom:2px")
                                            if this.props.rental.indexOf("new") == 0
                                                input.form-control.input-sm(value=this.rental.items[type._id].count+"" style="max-width:100px" onChange=this.changeItem.bind(this,type._id) onFocus=this.selectCount.bind(this))
                                            else
                                                = this.rental.items[type._id].count
                                        td
                                            .btn.btn-default.btn-xs.pull-right(onClick=this.removeItem.bind(this,type._id))
                                                i.glyphicon.glyphicon-trash
    if this.adding
        Modal
            .modal-header
                h2 Equipment hinzufügen
            .modal-body(style="maxHeight:500px;overflowY:auto")
                each category in this.categories
                    h4= category.name
                    table.table.table-striped
                        tbody
                            each type in category.types
                                if !this.rental.items[type._id]
                                    tr
                                        td(onClick=this.addItem.bind(this,type._id))= (type.manufacturer?type.manufacturer+" ":"")+type.name
            .modal-footer
                button.btn.btn-primary(onClick=this.done.bind(this)) Fertig
script.
    var client = require("../client");
    var DatePicker = require("react-widgets").DateTimePicker;
    var moment = require("moment");
    var Modal = require("./Modal");
    var ContactBox = require("./ContactBox");
    var util = require("../util");
script(section="body").
    constructor(props,context){
        super(props,context);
        this.componentWillReceiveProps(props);
    }
    componentWillReceiveProps(props){
        this.props = props;
        this.loadData();
    }
    getNeededPermissions(){
        return ["rentals_read"];
    }
    
    async loadData(){
        var opts = {};
        if(this.props.project) opts.project = this.props.project;
        [this.rental,this.categories,this.types] = await Promise.all([
            client.getRental(this.props.rental,opts),
            client.getEquipmentCategories(),
            client.findEquipmentTypes({})
        ]);
        if(!this.rental._id){
            this.rental.status = this.props.rental=="newrequest"?"requested":(this.props.rental=="newbooking"?"booked":"received")                 
        }
        if(!this.rental.delivery) this.rental.delivery = moment({hour:20}).toDate().getTime();
        if(!this.rental.return) this.rental.return = moment({hour:20}).add(1,"days").toDate().getTime();
        
        this.categories = util.createIndex(this.categories,"_id");       
        this.categories["undefined"] = {_id:"undefined",name:"Nicht kategorisiert"};
        for(var type of this.types){
            var category = this.categories[type.category];
            if(!category.types) category.types = [];
            category.types.push(type);
        }
        console.log(this.categories);
        this.forceUpdate();
    }
    
    onNameChange(e){
        this.rental.name = e.target.value;
        this.forceUpdate();
    }
    
    onSupplierChange(id){
        if(id){
            this.rental.supplier = id;
        }else{
            delete this.rental.supplier;
        }
        this.forceUpdate();
    }
    
    onDeliveryChanged(time){
        if(time) this.rental.delivery = time.getTime();
        this.forceUpdate();
    }
    
    onReturnChanged(time){
        if(time) this.rental.return = time.getTime();
        this.forceUpdate();
    }
    
    add(){
        this.adding = true;
        this.forceUpdate();
    }
    
    done(){
        delete this.adding;
        this.forceUpdate();
    }
    
    addItem(type){
        this.rental.items[type] = {count:0,ids:[]};
        this.forceUpdate();
    }
    
    changeItem(type,e){
        if(/^[0-9]+$/.test(e.target.value)) this.rental.items[type].count = parseInt(e.target.value,10);
        if(e.target.value.length == 0) this.rental.items[type].count = 0;
        this.forceUpdate();
    }
    
    selectCount(e){
        setTimeout(e.target.select.bind(e.target))        
    }
    
    removeItem(type){
        delete this.rental.items[type];
        this.forceUpdate();
    }
    
    async book(){
        await client.updateRentalStatus(this.props.rental,"booked");
        history.back();
    }
    async receive(){
        await client.updateRentalStatus(this.props.rental,"received");
        history.back();
    }
    async doreturn(){
        await client.updateRentalStatus(this.props.rental,"returned");
        history.back();
    }

    cancel(){
        history.back();
    }

    async save(){               
        await client.updateRental(this.props.rental,this.rental);
        history.back();
    }
